// controllers/orderController.js

const Order = require('../models/Order');
const Product = require('../models/Product');
const User = require('../models/User');
const { safeNotify } = require('../utils/notificationMiddleware');
const assignOrderToNearestShipper = require('../utils/assignOrderToNearestShipper');

// H√†m ki·ªÉm tra gi·ªù b√°n
const validateSaleTime = (product, nowMin) => {
    if (!product.saleStartTime || !product.saleEndTime) return true; // B√°n 24/7 n·∫øu kh√¥ng c√≥ gi·ªù
    const toMin = str => {
        const [h, m] = str.split(':').map(Number);
        return h * 60 + m;
    };
    const start = toMin(product.saleStartTime);
    const end = toMin(product.saleEndTime);
    return start <= end ? (nowMin >= start && nowMin <= end) : (nowMin >= start || nowMin <= end);
};

// H√†m g·ª≠i th√¥ng b√°o cho Admin
const notifyAdmins = async (order) => {
    const admins = await User.find({ role: 'admin', fcmToken: { $exists: true } });
    for (const admin of admins) {
        try {
            await safeNotify(admin.fcmToken, {
                title: 'üõí ƒê∆°n h√†ng m·ªõi',
                body: `#${order._id.toString().slice(-6)} t·ª´ ${order.customerName}: ${order.total.toLocaleString()}ƒë`,
                data: { orderId: order._id.toString(), shipperView: "true" }
            });
        } catch (e) {
            console.error(`[notify admin] error for admin ${admin._id}:`, e);
        }
    }
};

// ==============================================================================
// ===                      H√ÄM CREATE ORDER - PHI√äN B·∫¢N HO√ÄN CH·ªàNH          ===
// ==============================================================================
exports.createOrder = async (req, res) => {
  try {
    const {
      items, total, phone, shippingAddress, shippingLocation, customerName,
      paymentMethod, shippingFee, extraSurcharge, voucherDiscount, voucherCode
    } = req.body;

    // --- 1. Validation c∆° b·∫£n ---
    if (!Array.isArray(items) || items.length === 0) return res.status(400).json({ message: 'Gi·ªè h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' });
    if (!phone || !shippingAddress || !shippingLocation) return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin nh·∫≠n h√†ng' });

    const now = new Date();
    const nowMin = now.getHours() * 60 + now.getMinutes();
    const enrichedItems = []; // M·∫£ng ch·ª©a c√°c item ƒë√£ ƒë∆∞·ª£c "l√†m gi√†u" th√¥ng tin

    // --- 2. X·ª≠ l√Ω v√† l√†m gi√†u th√¥ng tin cho t·ª´ng item ---
    for (const item of items) {
      const product = await Product.findById(item.productId).populate('seller');
      if (!product) throw new Error(`S·∫£n ph·∫©m "${item.name}" kh√¥ng c√≤n t·ªìn t·∫°i.`);
      if (!product.seller) throw new Error(`S·∫£n ph·∫©m "${product.name}" kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi b√°n.`);

      if (!validateSaleTime(product, nowMin)) {
        throw new Error(`S·∫£n ph·∫©m "${product.name}" ch·ªâ b√°n t·ª´ ${product.saleStartTime} ƒë·∫øn ${product.saleEndTime}.`);
      }

      // X√°c ƒë·ªãnh t·ªìn kho c·ªßa s·∫£n ph·∫©m/bi·∫øn th·ªÉ
      let stock;
      if (product.variantTable && product.variantTable.length > 0) {
          const variant = product.variantTable.find(v => v.combination === item.combination);
          stock = variant ? variant.stock : 0;
      } else {
          stock = product.stock;
      }
      if (stock < item.quantity) {
        throw new Error(`S·∫£n ph·∫©m "${product.name}" kh√¥ng ƒë·ªß h√†ng trong kho.`);
      }

      // <<< LOGIC M·ªöI: T√çNH PH√ç S√ÄN (COMMISSION) >>>
      const itemTotal = item.price * item.quantity;
      const commissionRate = product.seller.commissionRate || 0;
      const commissionAmount = itemTotal * (commissionRate / 100);
      
      enrichedItems.push({
        ...item,
        sellerId: product.seller._id,
        commissionAmount: commissionAmount, // <-- L∆∞u l·∫°i ti·ªÅn ph√≠ s√†n
      });

      // Tr·ª´ kho
      if (product.variantTable && product.variantTable.length > 0) {
        const variantIndex = product.variantTable.findIndex(v => v.combination === item.combination);
        if (variantIndex > -1) {
            product.variantTable[variantIndex].stock -= item.quantity;
        }
      } else {
        product.stock -= item.quantity;
      }
      await product.save();
    }

    // --- 3. T·∫°o ƒë∆°n h√†ng v·ªõi th√¥ng tin ƒë√£ ƒë∆∞·ª£c l√†m gi√†u ---
    const order = new Order({
      user: req.user._id,
      items: enrichedItems,
      total,
      customerName,
      phone,
      shippingAddress,
      shippingLocation,
      paymentMethod: paymentMethod || 'COD',
      shippingFee,
      extraSurcharge,
      voucherDiscount,
      voucherCode,
      status: 'Ch·ªù x√°c nh·∫≠n',
    });

    const savedOrder = await order.save();
    
    assignOrderToNearestShipper(savedOrder._id).catch(console.error);
    notifyAdmins(savedOrder);

    return res.status(201).json({
      message: 'T·∫°o ƒë∆°n th√†nh c√¥ng',
      order: { ...savedOrder.toObject(), timestamps: savedOrder.timestamps }
    });

  } catch (err) {
    console.error('L·ªói khi t·∫°o ƒë∆°n h√†ng:', err);
    const statusCode = err.name === 'ValidationError' ? 400 : (err.message.includes('t·ªìn t·∫°i') || err.message.includes('ƒë·ªß h√†ng')) ? 400 : 500;
    return res.status(statusCode).json({ message: err.message || 'L·ªói server' });
  }
};


// ==============================================================================
// ===                      C√ÅC H√ÄM KH√ÅC GI·ªÆ NGUY√äN                             ===
// ==============================================================================

exports.countByStatus = async (req, res) => {
  try {
    const counts = await Order.aggregate([ { $group: { _id: '$status', count: { $sum: 1 } } } ]).exec();
    const result = counts.reduce((acc, item) => { acc[item._id] = item.count; return acc; }, {});
    res.status(200).json(result);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

exports.acceptOrder = async (req, res) => {
  try {
    // ... (c√°c b∆∞·ªõc ki·ªÉm tra order v√† shipper gi·ªØ nguy√™n)
    const order = await Order.findById(req.params.id);
    if (!order) return res.status(404).json({ message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });
    if (order.status !== 'Ch·ªù x√°c nh·∫≠n') return res.status(400).json({ message: 'ƒê∆°n kh√¥ng kh·∫£ d·ª•ng' });

    const shipper = await User.findById(req.user._id);
    if (!shipper || shipper.role !== 'shipper') {
        return res.status(403).json({ message: 'T√†i kho·∫£n kh√¥ng ph·∫£i l√† shipper.' });
    }

    order.status = 'ƒêang x·ª≠ l√Ω';
    order.shipper = shipper._id;
    order.timestamps.acceptedAt = new Date();

    // <<< LOGIC T√çNH TO√ÅN THU NH·∫¨P ƒê·∫¶Y ƒê·ª¶ >>>
    // 1. T√≠nh thu nh·∫≠p t·ª´ ph√≠ ship
    const shippingFeeShareRate = (shipper.shipperProfile.shippingFeeShareRate || 0) / 100;
    const totalShippingFee = (order.shippingFee || 0) + (order.extraSurcharge || 0);
    const shipperShippingIncome = totalShippingFee * shippingFeeShareRate;
    
    // 2. T√≠nh t·ªïng ph√≠ s√†n (l·ª£i nhu·∫≠n c·ªßa admin t·ª´ ƒë∆°n h√†ng n√†y)
    const totalCommission = order.items.reduce((sum, item) => sum + (item.commissionAmount || 0), 0);
    
    // 3. T√≠nh ph·∫ßn chia s·∫ª l·ª£i nhu·∫≠n cho shipper
    const profitShareRate = (shipper.shipperProfile.profitShareRate || 0) / 100;
    const shipperProfitShare = totalCommission * profitShareRate;

    // 4. T·ªïng thu nh·∫≠p c·ªßa shipper
    order.shipperIncome = shipperShippingIncome + shipperProfitShare;
    
    // 5. L∆∞u l·∫°i chi ti·∫øt t√†i ch√≠nh t·∫°i th·ªùi ƒëi·ªÉm ƒë√≥
    order.financialDetails = {
        shippingFee: order.shippingFee,
        extraSurcharge: order.extraSurcharge,
        shippingFeeShareRate: shipper.shipperProfile.shippingFeeShareRate,
        profitShareRate: shipper.shipperProfile.profitShareRate // Th√™m tr∆∞·ªùng n√†y
    };
    // <<< K·∫æT TH√öC LOGIC M·ªöI >>>
    
    const updated = await order.save();
    if (updated.user) {
      const customer = await User.findById(updated.user);
      if (customer?.fcmToken) await safeNotify(customer.fcmToken, { title: 'Shipper ƒë√£ nh·∫≠n ƒë∆°n', body: `ƒê∆°n h√†ng #${order._id.toString().slice(-6)} ƒë√£ ƒë∆∞·ª£c shipper nh·∫≠n.`, data: { orderId: order._id.toString(), shipperView: "false" } });
    }
    
    res.json({ message: 'Nh·∫≠n ƒë∆°n th√†nh c√¥ng', order: updated });
  } catch (error) {
    console.error('L·ªói nh·∫≠n ƒë∆°n:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

exports.updateOrderStatusByShipper = async (req, res) => {
  try {
    const { status, cancelReason } = req.body;
    const order = await Order.findById(req.params.id);
    if (!order) return res.status(404).json({ message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });
    if (order.shipper.toString() !== req.user._id.toString()) return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn thao t√°c' });
    order.status = status;
    const now = new Date();
    if (status === 'ƒêang giao') order.timestamps.deliveringAt = now;
    if (status === 'ƒê√£ giao') order.timestamps.deliveredAt = now;
    if (status === 'ƒê√£ hu·ª∑') { order.timestamps.canceledAt = now; order.cancelReason = cancelReason || 'Kh√¥ng c√≥ l√Ω do'; }
    const updated = await order.save();
    res.json({ message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng', order: updated });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server' });
  }
};

exports.getShipperOrders = async (req, res) => {
  try {
    const { status, page = 1, limit = 10 } = req.query;
    const result = await Order.paginate({ shipper: req.user._id, ...(status && { status }) }, { page: parseInt(page), limit: parseInt(limit), sort: { createdAt: -1 } });
    res.json({ orders: result.docs.map(doc => ({ ...doc.toObject(), timestamps: doc.timestamps })), totalPages: result.totalPages, currentPage: result.page, totalOrders: result.totalDocs });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server' });
  }
};

exports.getMyOrders = async (req, res) => {
  try {
    const { status, page = 1, limit = 10 } = req.query;
    const result = await Order.paginate({ user: req.user._id, ...(status && { status }) }, { page, limit, sort: { createdAt: -1 } });
    res.json({ docs: result.docs.map(doc => ({ ...doc.toObject(), timestamps: doc.timestamps })), totalPages: result.totalPages, page: result.page });
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server' });
  }
};

exports.countOrdersByStatus = async (req, res) => {
  try {
    if (!req.user || !req.user._id) return res.status(401).json({ message: 'Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá' });
    const all = await Order.find({ user: req.user._id });
    const counts = all.reduce((acc, o) => { acc[o.status] = (acc[o.status] || 0) + 1; return acc; }, { 'Ch·ªù x√°c nh·∫≠n': 0, 'ƒêang x·ª≠ l√Ω': 0, 'ƒêang giao': 0, 'ƒê√£ giao': 0, 'ƒê√£ hu·ª∑': 0 });
    return res.status(200).json(counts);
  } catch (err) {
    return res.status(500).json({ message: 'L·ªói server khi ƒë·∫øm ƒë∆°n h√†ng theo tr·∫°ng th√°i' });
  }
};

exports.getOrderById = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id).populate('user', 'name phone').populate('shipper', 'name phone');
    if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    const canView = [req.user.isAdmin, order.user?._id.equals(req.user._id), order.shipper?._id.equals(req.user._id), req.query.shipperView === 'true' && order.status === 'Ch·ªù x√°c nh·∫≠n' && req.user.role === 'shipper'].some(Boolean);
    canView ? res.json({ ...order.toObject(), timestamps: order.timestamps }) : res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
  } catch (err) {
    res.status(err.name === 'CastError' ? 400 : 500).json({ message: err.message || 'L·ªói server' });
  }
};

exports.getAllOrders = async (req, res) => {
  try {
    const { status, page = 1, limit = 10 } = req.query;
    const result = await Order.paginate({ ...(status && { status }) }, { page, limit, sort: { createdAt: -1 }, populate: 'user' });
    res.json({ docs: result.docs.map(doc => ({ ...doc.toObject(), timestamps: doc.timestamps })), totalPages: result.totalPages, page: result.page });
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server' });
  }
};

exports.updateOrderStatus = async (req, res) => {
  try {
    const { status } = req.body;
    if (!status) return res.status(400).json({ message: 'Thi·∫øu tr·∫°ng th√°i' });
    const order = await Order.findById(req.params.id);
    if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    const now = new Date();
    order.status = status;
    if (status === 'ƒêang x·ª≠ l√Ω') order.timestamps.acceptedAt = now;
    if (status === 'ƒêang giao') order.timestamps.deliveringAt = now;
    if (status === 'ƒê√£ giao') order.timestamps.deliveredAt = now;
    if (status === 'ƒê√£ hu·ª∑') order.timestamps.canceledAt = now;
    const updated = await order.save();
    res.json({ message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng', order: updated });
  } catch (err) {
    res.status(err.name === 'ValidationError' ? 400 : 500).json({ message: err.message || 'L·ªói server' });
  }
};

exports.cancelOrder = async (req, res) => {
  try {
    const query = req.user.isAdmin ? { _id: req.params.id } : { _id: req.params.id, user: req.user._id };
    const order = await Order.findOne(query);
    if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    if (order.status !== 'Ch·ªù x√°c nh·∫≠n') return res.status(400).json({ message: 'Ch·ªâ h·ªßy ƒë∆∞·ª£c ƒë∆°n ch∆∞a x·ª≠ l√Ω' });
    order.status = 'ƒê√£ hu·ª∑';
    order.timestamps.canceledAt = new Date();
    const updated = await order.save();
    res.json({ message: 'Hu·ª∑ ƒë∆°n th√†nh c√¥ng', order: updated });
  } catch (err) {
    res.status(err.name === 'CastError' ? 400 : 500).json({ message: err.message || 'L·ªói server' });
  }
};

exports.adminCountByStatus = async (req, res) => {
  try {
    const counts = await Order.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);

    const result = {
        'pending': 0,
        'confirmed': 0,
        'shipped': 0,
        'delivered': 0,
        'canceled': 0
    };

    counts.forEach(item => {
        // √Ånh x·∫° t·ª´ t√™n tr·∫°ng th√°i trong DB sang key m√† frontend mong ƒë·ª£i
        if (item._id === 'Ch·ªù x√°c nh·∫≠n') result.pending = item.count;
        if (item._id === 'ƒêang x·ª≠ l√Ω') result.confirmed = item.count;
        if (item._id === 'ƒêang giao') result.shipped = item.count;
        if (item._id === 'ƒê√£ giao') result.delivered = item.count;
        if (item._id === 'ƒê√£ hu·ª∑') result.canceled = item.count;
    });

    res.status(200).json(result);
  } catch (error) {
    console.error('[adminCountByStatus] L·ªói:', error);
    res.status(500).json({ message: 'L·ªói server khi ƒë·∫øm ƒë∆°n h√†ng' });
  }
};
