// controllers/orderController.js
const Order = require('../models/Order');
const User = require('../models/User');
const Product = require('../models/Product');
const { findNearestStaff, calculateDistance } = require('../utils/geoUtils');
const sendPushNotification = require('../utils/sendPushNotification');

// [1] T·∫°o ƒë∆°n h√†ng m·ªõi (C·∫≠p nh·∫≠t phi√™n b·∫£n c√≥ t√≠ch h·ª£p v·ªã tr√≠)
const createOrder = async (req, res) => {
  try {
    const { items, total, phone, shippingAddress, customerName, paymentMethod, lng, lat } = req.body;

    // Ki·ªÉm tra khung gi·ªù b√°n h√†ng
    const now = new Date();
    const nowMin = now.getHours() * 60 + now.getMinutes();
    for (const item of items) {
      const prod = await Product.findById(item.productId);
      if (!prod) return res.status(404).json({ message: `S·∫£n ph·∫©m "${item.name}" kh√¥ng t·ªìn t·∫°i` });
      
      if (prod.saleStartTime && prod.saleEndTime) {
        const toMin = (str) => str.split(':').map(Number).reduce((h, m) => h * 60 + m);
        const [start, end] = [toMin(prod.saleStartTime), toMin(prod.saleEndTime)];
        const validTime = start <= end ? (nowMin >= start && nowMin <= end) : (nowMin >= start || nowMin <= end);
        if (!validTime) return res.status(400).json({ 
          message: `S·∫£n ph·∫©m "${prod.name}" ch·ªâ b√°n t·ª´ ${prod.saleStartTime} ƒë·∫øn ${prod.saleEndTime}`
        });
      }
    }

    // T·∫°o ƒë∆°n h√†ng v·ªõi th√¥ng tin v·ªã tr√≠
    const newOrder = new Order({
      items,
      total,
      phone,
      shippingAddress,
      customerName,
      paymentMethod,
      user: req.user._id,
      status: 'Ch·ªù x√°c nh·∫≠n',
      shippingLocation: {
        type: 'Point',
        coordinates: [parseFloat(lng), parseFloat(lat)]
      }
    });

    const savedOrder = await newOrder.save();

    // T√¨m v√† th√¥ng b√°o cho nh√¢n vi√™n g·∫ßn nh·∫•t
    const nearestStaff = await findNearestStaff(savedOrder.shippingLocation.coordinates, 10);
    if (nearestStaff.length > 0) {
      req.app.get('io').emit('newOrder', { 
        orderId: savedOrder._id,
        staffIds: nearestStaff.map(s => s._id)
      });
      
      const fcmTokens = nearestStaff.filter(s => s.fcmToken).map(s => s.fcmToken);
      if (fcmTokens.length > 0) {
        await sendPushNotification(
          fcmTokens,
          'üì¶ ƒê∆°n h√†ng m·ªõi g·∫ßn b·∫°n',
          `${customerName} - ${shippingAddress}`
        );
      }
    }

    // G·ª≠i th√¥ng b√°o cho admin
    const admins = await User.find({ isAdmin: true, fcmToken: { $exists: true } });
    for (const admin of admins) {
      await sendPushNotification(
        admin.fcmToken,
        'üõí ƒê∆°n h√†ng m·ªõi',
        `T·ªïng gi√° tr·ªã: ${total.toLocaleString()}ƒë`
      );
    }

    res.status(201).json(savedOrder);
  } catch (err) {
    console.error('[ORDER] L·ªói t·∫°o ƒë∆°n:', err);
    res.status(500).json({ message: 'L·ªói t·∫°o ƒë∆°n h√†ng', error: err.message });
  }
};

// [2] C√°c h√†m g·ªëc gi·ªØ nguy√™n
const getMyOrders = async (req, res) => {
  try {
    const orders = await Order.find({ user: req.user._id }).sort('-createdAt');
    res.json(orders);
  } catch (err) {
    console.error('[ORDER] L·ªói l·∫•y ƒë∆°n:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

const countOrdersByStatus = async (req, res) => {
  try {
    const counts = await Order.aggregate([
      { $match: { user: mongoose.Types.ObjectId(req.user._id) } },
      { $group: { _id: "$status", count: { $sum: 1 } } }
    ]);
    res.json(counts.reduce((acc, cur) => ({ ...acc, [cur._id]: cur.count }), {}));
  } catch (err) {
    console.error('[ORDER] L·ªói th·ªëng k√™:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

const getOrderById = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id)
      .populate('user', 'name email')
      .populate('deliveryStaff', 'name phone');
    
    if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n' });
    if (!req.user.isAdmin && order.user._id.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
    }
    res.json(order);
  } catch (err) {
    console.error('[ORDER] L·ªói chi ti·∫øt:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

const getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find()
      .populate('user', 'name phone')
      .populate('deliveryStaff', 'name')
      .sort('-createdAt');
    res.json(orders);
  } catch (err) {
    console.error('[ORDER] L·ªói l·∫•y t·∫•t c·∫£:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

const updateOrderStatus = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id);
    if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n' });
    
    order.status = req.body.status;
    const updatedOrder = await order.save();
    
    // G·ª≠i th√¥ng b√°o real-time
    req.app.get('io').emit('orderUpdate', updatedOrder);
    if (updatedOrder.user?.fcmToken) {
      await sendPushNotification(
        updatedOrder.user.fcmToken,
        'üîî Tr·∫°ng th√°i ƒë∆°n h√†ng',
        `ƒê∆°n h√†ng #${updatedOrder._id} ƒë√£ chuy·ªÉn sang "${req.body.status}"`
      );
    }
    
    res.json(updatedOrder);
  } catch (err) {
    console.error('[ORDER] L·ªói c·∫≠p nh·∫≠t:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

const cancelOrder = async (req, res) => {
  try {
    const order = await Order.findOne({
      _id: req.params.id,
      $or: [{ user: req.user._id }, { deliveryStaff: req.user._id }]
    });
    
    if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n' });
    if (!['Ch·ªù x√°c nh·∫≠n', 'ƒêang x·ª≠ l√Ω'].includes(order.status)) {
      return res.status(400).json({ message: 'Kh√¥ng th·ªÉ h·ªßy ƒë∆°n n√†y' });
    }
    
    order.status = 'ƒê√£ h·ªßy';
    await order.save();
    res.json({ message: 'H·ªßy ƒë∆°n th√†nh c√¥ng' });
  } catch (err) {
    console.error('[ORDER] L·ªói h·ªßy ƒë∆°n:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// [3] C√°c h√†m m·ªõi cho nh√¢n vi√™n giao h√†ng
const getAvailableDeliveryOrders = async (req, res) => {
  try {
    const staffLocation = req.user.deliveryInfo?.location?.coordinates;
    if (!staffLocation) return res.status(400).json({ message: 'Vui l√≤ng b·∫≠t ƒë·ªãnh v·ªã' });

    const orders = await Order.find({
      status: 'ƒêang x·ª≠ l√Ω',
      deliveryStaff: null,
      shippingLocation: {
        $nearSphere: {
          $geometry: {
            type: 'Point',
            coordinates: staffLocation
          },
          $maxDistance: 20000 // 20km
        }
      }
    }).populate('user', 'name address phone');

    res.json(orders);
  } catch (err) {
    console.error('[DELIVERY] L·ªói l·∫•y ƒë∆°n:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

const acceptOrderDelivery = async (req, res) => {
  try {
    const order = await Order.findOneAndUpdate(
      { _id: req.params.id, deliveryStaff: null },
      { 
        deliveryStaff: req.user._id,
        status: 'ƒêang giao',
        assignedAt: new Date()
      },
      { new: true }
    );
    
    if (!order) return res.status(400).json({ message: 'ƒê∆°n kh√¥ng kh·∫£ d·ª•ng' });
    
    await User.findByIdAndUpdate(req.user._id, {
      'deliveryInfo.status': 'busy',
      $push: { 'deliveryInfo.currentOrders': order._id }
    });

    res.json(order);
  } catch (err) {
    console.error('[DELIVERY] L·ªói nh·∫≠n ƒë∆°n:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

const updateDeliveryStatus = async (req, res) => {
  try {
    const { status, lat, lng } = req.body;
    const updateData = { status };
    
    if (lat && lng) {
      updateData.$push = {
        tracking: {
          location: { type: 'Point', coordinates: [lng, lat] },
          timestamp: new Date()
        }
      };
    }

    const order = await Order.findOneAndUpdate(
      { _id: req.params.id, deliveryStaff: req.user._id },
      updateData,
      { new: true }
    );

    if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n' });
    res.json(order);
  } catch (err) {
    console.error('[DELIVERY] L·ªói c·∫≠p nh·∫≠t:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

const getMyAssignedOrders = async (req, res) => {
  try {
    const orders = await Order.find({
      deliveryStaff: req.user._id,
      status: { $in: ['ƒêang giao', 'ƒê√£ giao'] }
    }).sort('-assignedAt');
    
    res.json(orders);
  } catch (err) {
    console.error('[DELIVERY] L·ªói l·∫•y ƒë∆°n:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};



const updateOrderLocation = async (req, res) => {
  try {
    const { lat, lng } = req.body;
    if (!lat || !lng) {
      return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p t·ªça ƒë·ªô lat v√† lng' });
    }

    const order = await Order.findOneAndUpdate(
      { _id: req.params.id, deliveryStaff: req.user._id },
      {
        $push: {
          tracking: {
            location: { type: 'Point', coordinates: [parseFloat(lng), parseFloat(lat)] },
            timestamp: new Date()
          }
        }
      },
      { new: true }
    );

    if (!order) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c b·∫°n kh√¥ng ƒë∆∞·ª£c ph√¢n c√¥ng' });
    }

    // G·ª≠i th√¥ng b√°o real-time
    req.app.get('io').emit('orderLocationUpdate', {
      orderId: order._id,
      location: { lat, lng }
    });

    res.json(order);
  } catch (err) {
    console.error('[ORDER] L·ªói c·∫≠p nh·∫≠t v·ªã tr√≠:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};






module.exports = {
  createOrder,
  getMyOrders,
  countOrdersByStatus,
  getOrderById,
  getAllOrders,
  updateOrderStatus,
  cancelOrder,
  // Delivery functions
  getAvailableDeliveryOrders,
  acceptOrderDelivery,
  updateDeliveryStatus,
  getMyAssignedOrders
};
