// File: backend/controllers/orderController.js
// PHI√äN B·∫¢N HO√ÄN CH·ªàNH TUY·ªÜT ƒê·ªêI - KH√îNG T√ìM T·∫ÆT

const Order = require('../models/Order');
const Product = require('../models/Product');
const User = require('../models/User');
const Notification = require('../models/Notification');
const Conversation = require('../models/Conversation');
const { safeNotify } = require('../utils/notificationMiddleware');
const assignOrderToNearestShipper = require('../utils/assignOrderToNearestShipper');
const { processOrderCompletionForFinance, reverseFinancialEntryForOrder } = require('./financeController');
const UserVoucher = require('../models/UserVoucher');
const Voucher = require('../models/Voucher');
const mongoose = require('mongoose');
const shippingController = require('./shippingController');
const moment = require('moment-timezone');
const Message = require('../models/Message'); // TH√äM IMPORT N√ÄY

const validateSaleTime = (product) => {
    if (!product.saleTimeFrames || product.saleTimeFrames.length === 0) {
        console.log(`[SaleTime] No time frames for product "${product.name}". Allowing sale.`);
        return true; // Cho ph√©p b√°n n·∫øu kh√¥ng c√≥ khung gi·ªù n√†o ƒë∆∞·ª£c ƒë·∫∑t
    }

    // L·∫•y th·ªùi gian hi·ªán t·∫°i ·ªü m√∫i gi·ªù Vi·ªát Nam
    const now = new Date(new Date().toLocaleString("en-US", {timeZone: "Asia/Ho_Chi_Minh"}));

    console.log(`[SaleTime] Current VN Time: ${now.getHours()}:${now.getMinutes()}`);

    // Ki·ªÉm tra xem th·ªùi gian hi·ªán t·∫°i c√≥ n·∫±m trong B·∫§T K·ª≤ khung gi·ªù n√†o kh√¥ng
    const isWithinAnyFrame = product.saleTimeFrames.some(frame => {
        if (!frame.start || !frame.end) return false;

        const [startHour, startMinute] = frame.start.split(':').map(Number);
        const [endHour, endMinute] = frame.end.split(':').map(Number);
        
        // T·∫°o ƒë·ªëi t∆∞·ª£ng Date cho ng√†y h√¥m nay v·ªõi gi·ªù b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        const startTime = new Date(now.getTime());
        startTime.setHours(startHour, startMinute, 0, 0);

        const endTime = new Date(now.getTime());
        endTime.setHours(endHour, endMinute, 0, 0);

        console.log(`[SaleTime] Checking frame: ${frame.start} - ${frame.end}. Now is between ${startTime.toLocaleTimeString()} and ${endTime.toLocaleTimeString()}?`);

        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p qua ng√†y (v√≠ d·ª•: 22:00 - 02:00)
        if (startTime > endTime) {
            // N·∫øu qua ng√†y, ƒëi·ªÅu ki·ªán ƒë√∫ng l√†: (now >= start) HO·∫∂C (now <= end)
            // V√≠ d·ª•: B√°n t·ª´ 10h t·ªëi ƒë·∫øn 2h s√°ng.
            // L√∫c 11h t·ªëi (now > start) -> OK
            // L√∫c 1h s√°ng (now < end) -> OK
            const result = now >= startTime || now <= endTime;
            console.log(`[SaleTime] Overnight frame. Result: ${result}`);
            return result;
        } else {
            // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p trong ng√†y (v√≠ d·ª•: 07:00 - 19:30)
            const result = now >= startTime && now <= endTime;
            console.log(`[SaleTime] Same-day frame. Result: ${result}`);
            return result;
        }
    });

    if (!isWithinAnyFrame) {
        console.warn(`[SaleTime] Product "${product.name}" is OUTSIDE of all sale time frames.`);
    }

    return isWithinAnyFrame;
};

const notifyAdmins = async (order) => {
    try {
        const admins = await User.find({ role: 'admin', fcmToken: { $exists: true, $ne: null } });
        for (const admin of admins) {
            await safeNotify(admin.fcmToken, {
                title: 'üõí ƒê∆°n h√†ng m·ªõi',
                body: `#${order._id.toString().slice(-6)} t·ª´ ${order.customerName}: ${order.total.toLocaleString()}ƒë`,
                data: { orderId: order._id.toString(), shipperView: "true" }
            });
        }
    } catch (err) {
        console.error(`[notify admin] error for admin:`, e);
    }
};

exports.createOrder = async (req, res) => {
    // Kh√¥ng b·∫Øt ƒë·∫ßu transaction ·ªü ƒë√¢y n·ªØa
    let savedOrder;

    try {
        const {
            items, phone, shippingAddress, shippingLocation, customerName,
            paymentMethod, voucherDiscount, voucherCode, customerNotes
        } = req.body;
        const userId = req.user._id;

        if (!Array.isArray(items) || items.length === 0) {
            throw new Error('Gi·ªè h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
        }
        if (!phone || !shippingAddress || !shippingLocation) {
            throw new Error('Thi·∫øu th√¥ng tin nh·∫≠n h√†ng');
        }
        
        const firstItemInfo = items[0];
        const productForCheck = await Product.findById(firstItemInfo.productId).populate('seller');
        if (!productForCheck) {
            throw new Error(`S·∫£n ph·∫©m kh√¥ng c√≤n t·ªìn t·∫°i.`);
        }
        
        if (productForCheck.requiresConsultation) {
            const consultationOrder = new Order({
                user: userId,
                items: [{ 
                    productId: productForCheck._id, 
                    name: `Y√™u c·∫ßu t∆∞ v·∫•n: ${productForCheck.name}`, 
                    price: 0,
                    quantity: 1, 
                    sellerId: productForCheck.seller._id 
                }],
                total: 0,
                status: 'Ch·ªù t∆∞ v·∫•n', 
                isConsultationOrder: true,
                consultationSellerId: productForCheck.seller._id,
                customerName, phone, shippingAddress, shippingLocation,
                region: req.user.region, // <<< K·∫æ TH·ª™A REGION T·ª™ CUSTOMER
            });

            savedOrder = await consultationOrder.save();
            
            const conversation = await Conversation.findOneAndUpdate(
                { productId: productForCheck._id, customerId: userId, sellerId: productForCheck.seller._id },
                { $set: { updatedAt: new Date() } },
                { new: true, upsert: true }
            );
            
            res.status(201).json({ 
                message: 'Y√™u c·∫ßu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† ƒëang t√¨m shipper.', 
                order: savedOrder,
                conversationId: conversation._id.toString()
            });

        } else {
            const session = await mongoose.startSession();
            session.startTransaction();
            try {
                const enrichedItems = [];
                let itemsTotal = 0;
                for (const item of items) {
                    const product = await Product.findById(item.productId).populate('seller').session(session);
                    if (!product) throw new Error(`S·∫£n ph·∫©m "${item.name}" kh√¥ng c√≤n t·ªìn t·∫°i.`);
                    if (!product.seller) throw new Error(`S·∫£n ph·∫©m "${product.name}" kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi b√°n.`);
                    if (!validateSaleTime(product)) {
                        const timeFramesString = product.saleTimeFrames.map(f => `${f.start}-${f.end}`).join(', ');
                        throw new Error(`S·∫£n ph·∫©m "${product.name}" ch·ªâ b√°n trong khung gi·ªù: ${timeFramesString}.`);
                    }
                    let stock;
                    if (product.variantTable && product.variantTable.length > 0) {
                        const variant = product.variantTable.find(v => v.combination === item.combination);
                        if (!variant) throw new Error(`Bi·∫øn th·ªÉ c·ªßa s·∫£n ph·∫©m "${item.name}" kh√¥ng t·ªìn t·∫°i.`);
                        stock = variant.stock;
                    } else {
                        stock = product.stock;
                    }
                    if (stock < item.quantity) {
                        throw new Error(`S·∫£n ph·∫©m "${product.name}" kh√¥ng ƒë·ªß h√†ng trong kho.`);
                    }
                    const itemValue = item.price * item.quantity;
                    itemsTotal += itemValue;
                    const commissionRate = product.seller.commissionRate || 0;
                    const commissionAmount = itemValue * (commissionRate / 100);
                    enrichedItems.push({ ...item, sellerId: product.seller._id, commissionAmount: commissionAmount });
                    if (product.variantTable && product.variantTable.length > 0) {
                        const variantIndex = product.variantTable.findIndex(v => v.combination === item.combination);
                        product.variantTable[variantIndex].stock -= item.quantity;
                    } else {
                        product.stock -= item.quantity;
                    }
                    await product.save({ session });
                }
                
                const { shippingFeeActual, shippingFeeCustomerPaid } = await shippingController.calculateFeeForOrder(shippingLocation, itemsTotal);
                const finalTotal = itemsTotal + shippingFeeCustomerPaid - (voucherDiscount || 0);

                if (voucherCode && voucherDiscount > 0) {
                    const voucher = await Voucher.findOne({ code: voucherCode.toUpperCase() }).session(session);
                    if (!voucher) throw new Error(`M√£ voucher "${voucherCode}" kh√¥ng t·ªìn t·∫°i.`);
                    const userVoucher = await UserVoucher.findOne({ user: userId, voucher: voucher._id, isUsed: false }).session(session);
                    if (!userVoucher) throw new Error(`B·∫°n kh√¥ng s·ªü h·ªØu voucher "${voucherCode}" ho·∫∑c ƒë√£ s·ª≠ d·ª•ng n√≥.`);
                    userVoucher.isUsed = true;
                    await userVoucher.save({ session });
                }
                const firstItemSeller = await User.findById(enrichedItems[0].sellerId).select('managedBy');

let profitRecipientId = null;
let profitShare = 100; // M·∫∑c ƒë·ªãnh Admin h∆∞·ªüng 100%

if (firstItemSeller && firstItemSeller.managedBy) {
    const regionManager = await User.findById(firstItemSeller.managedBy).select('regionManagerProfile');
    if (regionManager) {
        profitRecipientId = regionManager._id;
        profitShare = regionManager.regionManagerProfile.profitShareRate;
    }
}
                const order = new Order({
                    user: userId, items: enrichedItems, total: finalTotal, customerName, phone, shippingAddress,
                    shippingLocation, paymentMethod: paymentMethod || 'COD', shippingFeeActual: shippingFeeActual,
                    shippingFeeCustomerPaid: shippingFeeCustomerPaid, extraSurcharge: 0,
                    voucherDiscount: voucherDiscount || 0, voucherCode, status: 'Ch·ªù x√°c nh·∫≠n',
                    isConsultationOrder: false, customerNotes: customerNotes,
                    region: req.user.region, // <<< K·∫æ TH·ª™A REGION T·ª™ CUSTOMER
                    profitRecipient: profitRecipientId,
                    profitShareRateSnapshot: profitShare,
                });
                
                const [createdOrder] = await Order.create([order], { session });
                savedOrder = createdOrder;
                await session.commitTransaction();
                res.status(201).json({ message: 'T·∫°o ƒë∆°n th√†nh c√¥ng', order: { ...savedOrder.toObject(), timestamps: savedOrder.timestamps } });
            } catch (transactionError) {
                await session.abortTransaction();
                throw transactionError;
            } finally {
                session.endSession();
            }
        }
    } catch (err) {
        console.error('L·ªói khi t·∫°o ƒë∆°n h√†ng:', err);
        if (!res.headersSent) {
            const statusCode = err.message.includes('t·ªìn t·∫°i') || err.message.includes('ƒë·ªß h√†ng') || err.message.includes('voucher') ? 400 : 500;
            return res.status(statusCode).json({ message: err.message || 'L·ªói server' });
        }
    }

    if (savedOrder && savedOrder._id) {
    // ---- B·∫ÆT ƒê·∫¶U S·ª¨A L·ªñI ----
    const orderIdString = savedOrder._id.toString();
   
    // D√πng setTimeout ƒë·ªÉ ƒë·∫£m b·∫£o DB c√≥ th·ªùi gian ghi
    setTimeout(() => {
        if (savedOrder.isConsultationOrder) {
            assignOrderToNearestShipper(orderIdString).catch(err => {
                console.error(`[createOrder] L·ªói trong t√°c v·ª• n·ªÅn cho ƒë∆°n t∆∞ v·∫•n #${orderIdString}:`, err);
            });
        } else {
            Promise.all([
                assignOrderToNearestShipper(orderIdString), // Truy·ªÅn chu·ªói ID
                notifyAdmins(savedOrder) // H√†m n√†y c√≥ th·ªÉ v·∫´n c·∫ßn object ƒë·∫ßy ƒë·ªß
            ]).catch(err => {
                console.error(`[createOrder] L·ªói trong t√°c v·ª• n·ªÅn cho ƒë∆°n th∆∞·ªùng #${orderIdString}:`, err);
            });
        }
    }, 1500); // Gi·ªØ l·∫°i ƒë·ªô tr·ªÖ 1.5 gi√¢y ƒë·ªÉ ch·ªëng race condition
    // ---- K·∫æT TH√öC S·ª¨A L·ªñI ----
}
};

exports.acceptOrder = async (req, res) => {
    try {
        const order = await Order.findById(req.params.id)
            .populate('user', 'name fcmToken avatar')
            .populate('consultationSellerId', 'name fcmToken');

        if (!order) {
            return res.status(404).json({ message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });
        }
        
        const shipper = await User.findById(req.user._id);
        if (!shipper || shipper.role !== 'shipper') {
            return res.status(403).json({ message: 'T√†i kho·∫£n kh√¥ng ph·∫£i l√† shipper.' });
        }

        if (order.isConsultationOrder) {
            if (order.status !== 'Ch·ªù t∆∞ v·∫•n') {
                return res.status(400).json({ message: 'Y√™u c·∫ßu t∆∞ v·∫•n n√†y ƒë√£ c√≥ shipper nh·∫≠n ho·∫∑c ƒë√£ b·ªã h·ªßy.' });
            }
            order.status = 'ƒêang t∆∞ v·∫•n';
            order.shipper = shipper._id;
            order.timestamps.acceptedAt = new Date();
            const updatedOrder = await order.save();
            
            const conversation = await Conversation.findOne({
                productId: order.items[0].productId,
                customerId: order.user._id,
                sellerId: order.consultationSellerId._id,
            });
            
            if (conversation) {
                const conversationId = conversation._id.toString();

                // --- G·ª¨I TH√îNG B√ÅO CHO CUSTOMER (KH√ÅCH H√ÄNG) ---
                if (order.user && order.user.fcmToken) {
                    await safeNotify(order.user.fcmToken, { 
                        title: "ƒê√£ t√¨m th·∫•y ng∆∞·ªùi h·ªó tr·ª£!", 
                        body: `B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán v·ªõi ${order.consultationSellerId.name}.`,
                        // D·ªØ li·ªáu n√†y d√†nh cho App B√°n H√†ng c·ªßa kh√°ch
                        data: { type: 'consultation_unlocked', conversationId: conversationId } 
                    });
                }
                
                // --- G·ª¨I TH√îNG B√ÅO CHO SELLER (NG∆Ø·ªúI B√ÅN) ---
                if (order.consultationSellerId) {
                    const sellerId = order.consultationSellerId._id;
                    const sellerNotificationTitle = "Y√™u c·∫ßu t∆∞ v·∫•n m·ªõi";
                    const sellerNotificationBody = `Kh√°ch h√†ng "${order.user.name}" ƒëang ch·ªù b·∫°n t∆∞ v·∫•n.`;
                    
                    // D·ªØ li·ªáu n√†y d√†nh cho App Seller
                    const notificationDataForSeller = {
                        type: 'new_consultation_request', 
                        conversationId: conversationId,
                        screen: 'ConversationDetail', 
                        otherUserId: order.user._id.toString(),
                        otherUserName: order.user.name,
                    };

                    // 1. G·ª≠i push notification cho Seller
                    if (order.consultationSellerId.fcmToken) {
                        await safeNotify(order.consultationSellerId.fcmToken, { 
                            title: sellerNotificationTitle, 
                            body: sellerNotificationBody,
                            data: notificationDataForSeller
                        });
                    }
                    
                    // 2. L∆∞u th√¥ng b√°o v√†o database c·ªßa Seller
                    await Notification.create({
                        user: sellerId,
                        title: sellerNotificationTitle,
                        message: sellerNotificationBody,
                        type: 'order',
                        data: notificationDataForSeller
                    });
                     console.log(`[Notification] ƒê√£ L∆ØU th√¥ng b√°o t∆∞ v·∫•n m·ªõi cho seller ${sellerId}`);
                }
            }
            
            res.json({ message: "Nh·∫≠n y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng.", order: updatedOrder });

        } else {
            if (order.status !== 'Ch·ªù x√°c nh·∫≠n') {
                return res.status(400).json({ message: 'ƒê∆°n kh√¥ng kh·∫£ d·ª•ng ƒë·ªÉ nh·∫≠n' });
            }
            order.status = 'ƒêang x·ª≠ l√Ω';
            order.shipper = shipper._id;
            order.timestamps.acceptedAt = new Date();
            const shareRate = (shipper.shipperProfile.shippingFeeShareRate || 0) / 100;
            const totalActualShippingFee = (order.shippingFeeActual || 0) + (order.extraSurcharge || 0);
            const totalCommission = order.items.reduce((sum, item) => sum + (item.commissionAmount || 0), 0);
            const profitShareRate = (shipper.shipperProfile.profitShareRate || 0) / 100;
            order.shipperIncome = (totalActualShippingFee * shareRate) + (totalCommission * profitShareRate);
            order.financialDetails = {
                shippingFeeActual: order.shippingFeeActual,
                shippingFeeCustomerPaid: order.shippingFeeCustomerPaid,
                extraSurcharge: order.extraSurcharge,
                shippingFeeShareRate: shipper.shipperProfile.shippingFeeShareRate,
                profitShareRate: shipper.shipperProfile.profitShareRate
            };
            const updatedOrder = await order.save();
            if (order.user) {
                const title = 'Shipper ƒë√£ nh·∫≠n ƒë∆°n c·ªßa b·∫°n!';
                const message = `ƒê∆°n h√†ng #${order._id.toString().slice(-6)} ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã.`;
                if (order.user.fcmToken) {
                    await safeNotify(order.user.fcmToken, { title, body: message, data: { orderId: order._id.toString(), type: 'order_update' } });
                }
                await Notification.create({ user: order.user._id, title, message, type: 'order', data: { orderId: order._id.toString() } });
            }
            const sellerIds = [...new Set(order.items.map(item => item.sellerId.toString()))];
            const sellers = await User.find({ _id: { $in: sellerIds } }).select('fcmToken');
            const notificationTitle = 'ƒê∆°n h√†ng ƒë√£ c√≥ t√†i x·∫ø!';
            const notificationBody = `ƒê∆°n h√†ng #${order._id.toString().slice(-6)} ƒë√£ c√≥ t√†i x·∫ø nh·∫≠n. Vui l√≤ng chu·∫©n b·ªã h√†ng.`;
            for (const seller of sellers) {
                await Notification.create({ user: seller._id, title: notificationTitle, message: notificationBody, type: 'order_accepted_by_shipper', data: { orderId: order._id.toString(), screen: 'OrderDetail' } });
                if (seller.fcmToken) {
                    await safeNotify(seller.fcmToken, { title: notificationTitle, body: notificationBody, data: { orderId: order._id.toString(), type: 'order_accepted_by_shipper', screen: 'OrderDetail' } });
                }
            }
            res.json({ message: 'Nh·∫≠n ƒë∆°n th√†nh c√¥ng', order: updatedOrder });
        }
    } catch (error) {
        console.error('L·ªói khi ch·∫•p nh·∫≠n ƒë∆°n h√†ng:', error);
        res.status(500).json({ message: 'L·ªói server' });
    }
};

exports.countByStatus = async (req, res) => {
    try {
        const counts = await Order.aggregate([{ $group: { _id: '$status', count: { $sum: 1 } } }]).exec();
        const result = counts.reduce((acc, item) => { acc[item._id] = item.count; return acc; }, {});
        res.status(200).json(result);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
};

exports.updateOrderStatusByShipper = async (req, res) => {
    try {
        const { status, cancelReason } = req.body;
        const orderId = req.params.id;

        const order = await Order.findOne({ _id: orderId, shipper: req.user._id }).populate('user', 'fcmToken');

        if (!order) {
            return res.status(404).json({ message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng ph·∫£i shipper c·ªßa ƒë∆°n n√†y.' });
        }

        const validTransitions = {
            'ƒêang x·ª≠ l√Ω': ['ƒêang giao', 'ƒê√£ hu·ª∑'],
            'ƒêang giao': ['ƒê√£ giao', 'ƒê√£ hu·ª∑']
        };

        if (!validTransitions[order.status]?.includes(status)) {
            return res.status(400).json({ message: `Kh√¥ng th·ªÉ chuy·ªÉn t·ª´ tr·∫°ng th√°i "${order.status}" sang "${status}".` });
        }

        const now = new Date();
        order.status = status;

        if (status === 'ƒêang giao') {
            order.timestamps.deliveringAt = now;
        } else if (status === 'ƒê√£ giao') {
            order.timestamps.deliveredAt = now;
            (async () => {
        try {
            if (order.user && order.user.fcmToken) {
                const title = "B·∫°n h√£y ƒë√°nh gi√° ƒë∆°n h√†ng nh√©";
                const message = `ƒê∆°n h√†ng #${order._id.toString().slice(-6)} ƒë√£ giao th√†nh c√¥ng. H√£y cho ch√∫ng t√¥i bi·∫øt tr·∫£i nghi·ªám c·ªßa b·∫°n!`;
                
                await Notification.create({
                    user: order.user._id, title, message, type: 'order',
                    data: { 
                        screen: 'ReviewScreen', // M√†n h√¨nh ƒë√≠ch
                        orderId: order._id.toString()
                    }
                });
                
                await safeNotify(order.user.fcmToken, {
                    title, body: message,
                    data: { 
                        screen: 'ReviewScreen',
                        orderId: order._id.toString()
                    }
                });
            }
        } catch(e) { console.error("L·ªói g·ª≠i th√¥ng b√°o ƒë√°nh gi√°:", e); }
    })();

        } else if (status === 'ƒê√£ hu·ª∑') {
            order.timestamps.canceledAt = now;
            order.cancelReason = cancelReason || 'Shipper ƒë√£ h·ªßy ƒë∆°n';
        }

        const updatedOrder = await order.save();
        if (order.user) {
            let title = '';
            let message = '';
            switch (status) {
                case 'ƒêang giao':
                    title = 'ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao!';
                    message = `Shipper ƒëang tr√™n ƒë∆∞·ªùng giao ƒë∆°n h√†ng #${updatedOrder._id.toString().slice(-6)} ƒë·∫øn cho b·∫°n.`;
                    break;
                case 'ƒê√£ giao':
                    title = 'Giao h√†ng th√†nh c√¥ng!';
                    message = `ƒê∆°n h√†ng #${updatedOrder._id.toString().slice(-6)} ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!`;
                    break;
                case 'ƒê√£ hu·ª∑':
                    title = 'ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy';
                    message = `ƒê∆°n h√†ng #${updatedOrder._id.toString().slice(-6)} ƒë√£ b·ªã h·ªßy. L√Ω do: ${updatedOrder.cancelReason}`;
                    break;
            }
            if (title) {
                if (order.user.fcmToken) {
                    await safeNotify(order.user.fcmToken, {
                        title, body: message,
                        data: { orderId: updatedOrder._id.toString(), type: 'order_update' }
                    });
                }
                await Notification.create({
                    user: order.user._id, title, message, type: 'order',
                    data: { orderId: updatedOrder._id.toString() }
                });
            }
        }
       if (status === 'ƒê√£ giao') {
            await processOrderCompletionForFinance(updatedOrder._id);

            // --- B·∫ÆT ƒê·∫¶U TH√äM M·ªöI ---
            // N·∫øu ƒë√¢y l√† ƒë∆°n h√†ng t∆∞ v·∫•n, c·∫≠p nh·∫≠t l·∫°i tin nh·∫Øn b√°o gi√°
            if (updatedOrder.isConsultationOrder) {
                await Message.findOneAndUpdate(
                    { "data.orderId": updatedOrder._id.toString(), messageType: 'quote_summary' },
                    { 
                        $set: { "data.status": "ƒê√£ giao" },
                        content: `ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng. T·ªïng ti·ªÅn: ${updatedOrder.total.toLocaleString()}ƒë.`
                    }
                );
                console.log(`[Message Update] ƒê√£ c·∫≠p nh·∫≠t tin nh·∫Øn b√°o gi√° cho ƒë∆°n h√†ng ${updatedOrder._id} th√†nh 'ƒê√£ giao'.`);
            }
            // --- K·∫æT TH√öC TH√äM M·ªöI ---
        }
        
        // --- TH√äM LOGIC C·∫¨P NH·∫¨T TIN NH·∫ÆN KHI H·ª¶Y ---
        if (status === 'ƒê√£ hu·ª∑' && updatedOrder.isConsultationOrder) {
            await Message.findOneAndUpdate(
                { "data.orderId": updatedOrder._id.toString(), messageType: 'quote_summary' },
                { 
                    $set: { "data.status": "ƒê√£ hu·ª∑" },
                    content: `ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy. L√Ω do: ${updatedOrder.cancelReason}`
                }
            );
            console.log(`[Message Update] ƒê√£ c·∫≠p nh·∫≠t tin nh·∫Øn b√°o gi√° cho ƒë∆°n h√†ng ${updatedOrder._id} th√†nh 'ƒê√£ hu·ª∑'.`);
        }

        res.json({ message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng', order: updatedOrder });
    } catch (error) {
        console.error(`L·ªói khi shipper c·∫≠p nh·∫≠t tr·∫°ng th√°i:`, error);
        res.status(500).json({ message: 'L·ªói server' });
    }
};

exports.getShipperOrders = async (req, res) => {
    try {
        const { status, page = 1, limit = 10 } = req.query;
        const result = await Order.paginate({ shipper: req.user._id, ...(status && { status }) }, { page: parseInt(page), limit: parseInt(limit), sort: { 'timestamps.createdAt': -1 } });
        res.json({ orders: result.docs.map(doc => ({ ...doc.toObject(), timestamps: doc.timestamps })), totalPages: result.totalPages, currentPage: result.page, totalOrders: result.totalDocs });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server' });
    }
};

exports.getMyOrders = async (req, res) => {
    try {
        const { status, page = 1, limit = 10 } = req.query;
        const result = await Order.paginate({ user: req.user._id, ...(status && { status }) }, { page, limit, sort: { 'timestamps.createdAt': -1 } });
        res.json({ docs: result.docs.map(doc => ({ ...doc.toObject(), timestamps: doc.timestamps })), totalPages: result.totalPages, page: result.page });
    } catch (err) {
        res.status(500).json({ message: 'L·ªói server' });
    }
};

exports.countOrdersByStatus = async (req, res) => {
    try {
        if (!req.user || !req.user._id) {
            return res.status(401).json({ message: 'Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá' });
        }
        const counts = await Order.aggregate([{ $match: { user: req.user._id } }, { $group: { _id: '$status', count: { $sum: 1 } } }]);
        const result = { pending: 0, confirmed: 0, shipped: 0, delivered: 0, canceled: 0 };
        counts.forEach(item => {
            if (item._id === 'Ch·ªù x√°c nh·∫≠n') result.pending = item.count;
            if (item._id === 'ƒêang x·ª≠ l√Ω') result.confirmed = item.count;
            if (item._id === 'ƒêang giao') result.shipped = item.count;
            if (item._id === 'ƒê√£ giao') result.delivered = item.count;
            if (item._id === 'ƒê√£ hu·ª∑') result.canceled = item.count;
        });
        res.status(200).json(result);
    } catch (err) {
        console.error('[countOrdersByStatus] L·ªói:', err);
        return res.status(500).json({ message: 'L·ªói server khi ƒë·∫øm ƒë∆°n h√†ng' });
    }
};

exports.getOrderById = async (req, res) => {
    try {
        const order = await Order.findById(req.params.id)
            .populate('user', 'name phone')
            .populate('shipper', 'name phone avatar shipperProfile.vehicleType shipperProfile.licensePlate'); // Th√™m avatar v√†o select

        if (!order) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
        }

        let canView = false;
        const currentUserId = req.user._id;
        const currentUserRole = req.user.role;
        if (currentUserRole === 'admin') canView = true;
        else if (order.user?._id.equals(currentUserId)) canView = true;
        else if (order.shipper?._id.equals(currentUserId)) canView = true;
        else if (currentUserRole === 'shipper' && order.status === 'Ch·ªù x√°c nh·∫≠n') canView = true;
        else if (currentUserRole === 'seller' && order.items.some(item => item.sellerId.equals(currentUserId))) canView = true;

        if (canView) {
            let responseOrder = order.toObject({ virtuals: true });
            responseOrder.timestamps = order.timestamps;
            responseOrder.shippingFee = order.shippingFeeCustomerPaid || order.shippingFeeActual || 0;
            res.json(responseOrder);
        } else {
            res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng n√†y.' });
        }
    } catch (err) {
        console.error('[getOrderById] error:', err);
        res.status(500).json({ message: err.message || 'L·ªói server' });
    }
};

exports.getAllOrders = async (req, res) => {
    try {
        const { status, page = 1, limit = 10 } = req.query;
        console.log('[DEBUG] getAllOrders - User:', req.user._id, 'Role:', req.user.role, 'Region:', req.user.region);
        const query = {};
        if (status) {
            query.status = status;
        }
        if (req.user.role === 'region_manager' && req.user.region) {
            query.region = new mongoose.Types.ObjectId(req.user.region);
        }
        const options = {
            page: parseInt(page, 10),
            limit: parseInt(limit, 10),
            sort: { 'timestamps.createdAt': -1 },
            populate: { path: 'user', select: 'name' },
        };
        const result = await Order.paginate(query, options);
        res.json({
            docs: result.docs.map(doc => ({ ...doc.toObject(), timestamps: doc.timestamps })),
            totalPages: result.totalPages,
            page: result.page
        });
    } catch (err) {
        console.error('[getAllOrders] error:', err);
        res.status(500).json({ message: 'L·ªói server khi l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng' });
    }
};


exports.updateOrderStatus = async (req, res) => {
    try {
        const { status, cancelReason } = req.body;
        if (!status) return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin tr·∫°ng th√°i m·ªõi' });
        const order = await Order.findById(req.params.id);
        if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
        const oldStatus = order.status;
        order.status = status;
        const now = new Date();
        switch (status) {
            case 'ƒêang x·ª≠ l√Ω': if (!order.timestamps.acceptedAt) order.timestamps.acceptedAt = now; break;
            case 'ƒêang giao': if (!order.timestamps.deliveringAt) order.timestamps.deliveringAt = now; break;
            case 'ƒê√£ giao': if (!order.timestamps.deliveredAt) { order.timestamps.deliveredAt = now; await processOrderCompletionForFinance(order._id); } break;
            case 'ƒê√£ hu·ª∑': if (!order.timestamps.canceledAt) { order.timestamps.canceledAt = now; const reason = cancelReason || 'Admin ƒë√£ h·ªßy ƒë∆°n'; order.cancelReason = reason; if (oldStatus === 'ƒê√£ giao') { await reverseFinancialEntryForOrder(order._id, reason); } } break;
        }
        const updatedOrder = await order.save();
        res.json({ message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng', order: updatedOrder });
    } catch (err) {
        console.error('[updateOrderStatus by Admin] error:', err);
        res.status(500).json({ message: err.message || 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i' });
    }
};

exports.cancelOrder = async (req, res) => {
    try {
        const { id: orderId } = req.params;
        const { cancelReason } = req.body;
        const query = req.user.isAdmin ? { _id: orderId } : { _id: orderId, user: req.user._id };
        const order = await Order.findOne(query);

        if (!order) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
        }
        
        const cancellableStatuses = ['Ch·ªù x√°c nh·∫≠n', 'Ch·ªù t∆∞ v·∫•n', 'ƒêang t∆∞ v·∫•n', 'Ch·ªù kh√°ch x√°c nh·∫≠n'];
        if (!cancellableStatuses.includes(order.status)) {
            return res.status(400).json({ message: `Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i "${order.status}"` });
        }

        order.status = 'ƒê√£ hu·ª∑';
        order.cancelReason = cancelReason || 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy';
        order.timestamps.canceledAt = new Date();
        const updated = await order.save();

        if (order.isConsultationOrder) {
            const updatedMessage = await Message.findOneAndUpdate(
            { "data.orderId": orderId, messageType: 'quote_summary' },
            { 
                $set: { "data.status": "ƒê√£ hu·ª∑" },
                content: `Kh√°ch h√†ng ƒë√£ t·ª´ ch·ªëi b√°o gi√°.`
            },
            { new: true }
        );

        if (updatedMessage) {
            await Conversation.updateOne(
                { _id: updatedMessage.conversationId },
                { $inc: { unreadBySeller: 1 }, $set: { updatedAt: new Date() } }
            );
        }
            await Message.findOneAndUpdate(
            { "data.orderId": orderId, messageType: 'quote_summary' },
            { $set: { "data.status": "ƒê√£ hu·ª∑" } }
        );
        }

        res.json({ message: 'Hu·ª∑ ƒë∆°n th√†nh c√¥ng', order: updated });
    } catch (err) {
        res.status(err.name === 'CastError' ? 400 : 500).json({ message: err.message || 'L·ªói server' });
    }
};

exports.adminCountByStatus = async (req, res) => {
    try {
        console.log('[DEBUG] adminCountByStatus - User:', req.user._id, 'Role:', req.user.role, 'Region:', req.user.region);
        const matchQuery = {};
        if (req.user.role === 'region_manager' && req.user.region) {
            matchQuery.region = new mongoose.Types.ObjectId(req.user.region);
        }
        const counts = await Order.aggregate([
            { $match: matchQuery },
            { $group: { _id: '$status', count: { $sum: 1 } } }
        ]);
        const result = { 'pending': 0, 'confirmed': 0, 'shipped': 0, 'delivered': 0, 'canceled': 0 };
        counts.forEach(item => {
            if (item._id === 'Ch·ªù x√°c nh·∫≠n') result.pending = item.count;
            if (item._id === 'ƒêang x·ª≠ l√Ω') result.confirmed = item.count;
            if (item._id === 'ƒêang giao') result.shipped = item.count;
            if (item._id === 'ƒê√£ giao') result.delivered = item.count;
            if (item._id === 'ƒê√£ hu·ª∑') result.canceled = item.count;
        });
        res.status(200).json(result);
    } catch (error) {
        console.error('[adminCountByStatus] L·ªói:', error);
        res.status(500).json({ message: 'L·ªói server khi ƒë·∫øm ƒë∆°n h√†ng' });
    }
};
exports.requestOrderTransfer = async (req, res) => {
    const { id: orderId } = req.params;
    const shipperId = req.user._id;
    const session = await mongoose.startSession();
    session.startTransaction();

    try {
        const order = await Order.findById(orderId).session(session);
        if (!order) throw new Error('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i.');
        if (!order.shipper || order.shipper.toString() !== shipperId.toString()) throw new Error('B·∫°n kh√¥ng ph·∫£i shipper c·ªßa ƒë∆°n h√†ng n√†y.');
        if (!['ƒêang x·ª≠ l√Ω', 'ƒêang giao'].includes(order.status)) throw new Error('Ch·ªâ c√≥ th·ªÉ chuy·ªÉn ƒë∆°n h√†ng ƒëang x·ª≠ l√Ω ho·∫∑c ƒëang giao.');

        order.shipper = null;
        order.status = 'Ch·ªù x√°c nh·∫≠n';
        order.shipperIncome = 0;
        order.timestamps.acceptedAt = null;
        order.timestamps.deliveringAt = null;

        await order.save({ session });
        await session.commitTransaction();

        assignOrderToNearestShipper(order._id).catch(err => console.error(`[Order Transfer] L·ªói khi t√°i g√°n ƒë∆°n ${order._id}:`, err));

        const customer = await User.findById(order.user);
        if (customer) {
            const title = 'Th√¥ng b√°o ƒë∆°n h√†ng';
            const message = `Shipper c≈© c·ªßa b·∫°n kh√¥ng th·ªÉ ti·∫øp t·ª•c giao ƒë∆°n h√†ng #${order._id.toString().slice(-6)}. Ch√∫ng t√¥i ƒëang t√¨m shipper m·ªõi cho b·∫°n.`;

            if (customer.fcmToken) {
                await safeNotify(customer.fcmToken, {
                    title,
                    body: message,
                    data: { orderId: order._id.toString(), type: 'order_transfer_customer' }
                });
            }

            await Notification.create({
                user: customer._id,
                title: title,
                message: message,
                type: 'order',
                data: { orderId: order._id.toString() }
            });
        }
    
        const admins = await User.find({ role: 'admin', fcmToken: { $exists: true } });
        for (const admin of admins) {
            await safeNotify(admin.fcmToken, {
                title: 'Chuy·ªÉn ƒë∆°n h√†ng',
                body: `Shipper ${req.user.name} ƒë√£ y√™u c·∫ßu chuy·ªÉn ƒë∆°n h√†ng #${order._id.toString().slice(-6)}.`,
                data: { orderId: order._id.toString(), type: 'order_transfer_admin' }
            });
        }

        res.status(200).json({ message: 'Y√™u c·∫ßu chuy·ªÉn ƒë∆°n th√†nh c√¥ng. ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c t√¨m shipper m·ªõi.' });
    } catch (error) {
        await session.abortTransaction();
        console.error('[requestOrderTransfer] L·ªói:', error);
        res.status(500).json({ message: error.message || 'L·ªói server khi y√™u c·∫ßu chuy·ªÉn ƒë∆°n.' });
    } finally {
        session.endSession();
    }
};

exports.requestConsultation = async (req, res) => {
    try {
        const { sellerId, initialMessage } = req.body;
        const userId = req.user._id;
        const consultationOrder = new Order({
            user: userId,
            items: [],
            total: 0,
            status: 'Ch·ªù t∆∞ v·∫•n',
        });
        
        res.status(201).json({ message: "Y√™u c·∫ßu t∆∞ v·∫•n ƒë√£ ƒë∆∞·ª£c g·ª≠i.", order: consultationOrder });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi t·∫°o y√™u c·∫ßu t∆∞ v·∫•n." });
    }
};

exports.confirmPricedOrder = async (req, res) => {
    try {
        const { id: orderId } = req.params;
        const userId = req.user._id;

        const order = await Order.findOne({ 
            _id: orderId, 
            user: userId, 
            status: 'Ch·ªù kh√°ch x√°c nh·∫≠n' 
        }).populate('shipper', 'name fcmToken')
          .populate('consultationSellerId', 'name fcmToken');

        if (!order) {
            return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t√¨m th·∫•y." });
        }

        order.status = 'ƒêang x·ª≠ l√Ω'; 
        
        const shipper = await User.findById(order.shipper._id);
        if (shipper && shipper.shipperProfile) {
            const shareRate = (shipper.shipperProfile.shippingFeeShareRate || 0) / 100;
            const totalActualShippingFee = (order.shippingFeeActual || 0) + (order.extraSurcharge || 0);
            const totalCommission = order.items.reduce((sum, item) => sum + (item.commissionAmount || 0), 0);
            const profitShareRate = (shipper.shipperProfile.profitShareRate || 0) / 100;
            
            order.shipperIncome = (totalActualShippingFee * shareRate) + (totalCommission * profitShareRate);
        }

        await order.save();
        
        const updatedMessage = await Message.findOneAndUpdate(
            { "data.orderId": orderId, messageType: 'quote_summary' },
            { 
                $set: { "data.status": "ƒêang x·ª≠ l√Ω" },
                content: `Kh√°ch h√†ng ƒë√£ ch·∫•p nh·∫≠n b√°o gi√°. T·ªïng ti·ªÅn: ${order.total.toLocaleString()}ƒë.`
            },
            { new: true }
        );

        if (updatedMessage) {
            await Conversation.updateOne(
                { _id: updatedMessage.conversationId },
                { $inc: { unreadBySeller: 1 }, $set: { updatedAt: new Date() } }
            );
        }

        const notificationTitle = "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!";
        const notificationBody = `Kh√°ch h√†ng ƒë√£ ƒë·ªìng √Ω v·ªõi b√°o gi√° cho ƒë∆°n h√†ng #${order._id.toString().slice(-6)}.`;

        if (order.consultationSellerId && order.consultationSellerId.fcmToken) {
            await safeNotify(order.consultationSellerId.fcmToken, {
                title: notificationTitle,
                body: `${notificationBody} Vui l√≤ng chu·∫©n b·ªã h√†ng ƒë·ªÉ giao.`,
                data: { orderId: order._id.toString(), type: 'order_confirmed_by_customer' }
            });
        }
        await Notification.create({
            user: order.consultationSellerId._id,
            title: notificationTitle,
            message: `${notificationBody} Vui l√≤ng chu·∫©n b·ªã h√†ng ƒë·ªÉ giao.`,
            type: 'order',
            data: { orderId: order._id.toString() }
        });

        if (order.shipper && order.shipper.fcmToken) {
            await safeNotify(order.shipper.fcmToken, {
                title: notificationTitle,
                body: `${notificationBody} Vui l√≤ng b·∫Øt ƒë·∫ßu quy tr√¨nh giao h√†ng.`,
                data: { orderId: order._id.toString(), type: 'order_confirmed_by_customer' }
            });
        }
        await Notification.create({
            user: order.shipper._id,
            title: notificationTitle,
            message: `${notificationBody} Vui l√≤ng b·∫Øt ƒë·∫ßu quy tr√¨nh giao h√†ng.`,
            type: 'order',
            data: { orderId: order._id.toString() }
        });

        res.status(200).json({ message: "ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng!", order });
    } catch (error) {
        console.error("L·ªói khi x√°c nh·∫≠n ƒë∆°n h√†ng ƒë√£ b√°o gi√°:", error);
        res.status(500).json({ message: "L·ªói server khi x√°c nh·∫≠n ƒë∆°n h√†ng." });
    }
};

exports.getOrderAndChatStatus = async (req, res) => {
    try {
        const order = await Order.findById(req.params.id)
            .select('status items user consultationSellerId')
            .lean(); // D√πng lean ƒë·ªÉ nhanh h∆°n

        if (!order) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
        }

        let messageCount = 0;
        // Ch·ªâ t√¨m s·ªë l∆∞·ª£ng tin nh·∫Øn n·∫øu ƒë√¢y l√† ƒë∆°n h√†ng t∆∞ v·∫•n
        if (order.isConsultationOrder) {
            const conversation = await Conversation.findOne({
                // D√πng c√°c tr∆∞·ªùng t·ª´ order ƒë·ªÉ t√¨m ƒë√∫ng conversation
                productId: order.items[0].productId,
                customerId: order.user,
                sellerId: order.consultationSellerId,
            }).select('_id');
            
            if (conversation) {
                messageCount = await Message.countDocuments({ conversationId: conversation._id });
            }
        }
        
        res.status(200).json({ 
            status: order.status,
            messageCount: messageCount 
        });

    } catch (error) {
        console.error("L·ªói khi l·∫•y getOrderAndChatStatus:", error);
        res.status(500).json({ message: 'L·ªói server' });
    }
};

// Gi·ªØ l·∫°i h√†m c≈© ƒë·ªÉ tr√°nh l·ªói n·∫øu c√≥ n∆°i kh√°c ƒëang d√πng
exports.getOrderStatus = async (req, res) => {
    try {
        const order = await Order.findById(req.params.id).select('status');
        if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
        res.status(200).json({ status: order.status });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server' });
    }
};
