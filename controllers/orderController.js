// controllers/orderController.js
const Order = require('../models/Order');
const Product = require('../models/Product');
const User = require('../models/User');
const sendPushNotification = require('../utils/sendPushNotification');
const assignOrderToNearestShipper = require('../utils/assignOrderToNearestShipper');

/**
 * T·∫°o ƒë∆°n h√†ng m·ªõi:
 * 1. Ki·ªÉm tra gi·ªù b√°n c·ªßa t·ª´ng s·∫£n ph·∫©m (saleStartTime, saleEndTime)
 * 2. Ki·ªÉm tra t·ªìn kho v√† gi·∫£m countInStock
 * 3. L∆∞u ƒë∆°n h√†ng (k√®m shippingLocation)
 * 4. G√°n shipper g·∫ßn nh·∫•t b·∫•t ƒë·ªìng b·ªô
 * 5. G·ª≠i notification cho admin
 */
const validateSaleTime = (product, nowMin) => {
  const toMin = str => {
    const [h, m] = str.split(':').map(Number);
    return h * 60 + m;
  };
  
  const start = toMin(product.saleStartTime);
  const end = toMin(product.saleEndTime);
  
  if (start <= end) {
    return nowMin >= start && nowMin <= end;
  } 
  return nowMin >= start || nowMin <= end;
};

const processOrderItem = async (item) => {
  const prod = await Product.findById(item.productId);
  if (!prod) {
    throw new Error(`S·∫£n ph·∫©m "${item.name}" kh√¥ng t·ªìn t·∫°i`);
  }

  const now = new Date();
  const nowMin = now.getHours() * 60 + now.getMinutes();

  if (prod.saleStartTime && prod.saleEndTime) {
    if (!validateSaleTime(prod, nowMin)) {
      throw new Error(`S·∫£n ph·∫©m "${prod.name}" ch·ªâ b√°n t·ª´ ${prod.saleStartTime} ƒë·∫øn ${prod.saleEndTime}`);
    }
  }

  if (prod.countInStock < item.quantity) {
    throw new Error(`S·∫£n ph·∫©m "${prod.name}" kh√¥ng ƒë·ªß h√†ng trong kho`);
  }
  
  prod.countInStock -= item.quantity;
  await prod.save();
  return prod;
};

const notifyAdmins = async (order, total, userName) => {
  const admins = await User.find({
    role: 'admin',
    fcmToken: { $exists: true, $ne: null }
  });
  
  for (const admin of admins) {
    try {
      await sendPushNotification(admin.fcmToken, {
        title: 'üõí ƒê∆°n h√†ng m·ªõi',
        body: `#${order._id.toString().slice(-6)} t·ª´ ${userName || 'kh√°ch'}: ${total.toLocaleString()}ƒë`,
        data: { orderId: order._id }
      });
    } catch (e) {
      console.error(`[notify admin] error for admin ${admin._id}:`, e);
    }
  }
};

exports.createOrder = async (req, res) => {
  try {
    const {
      items,
      total,
      phone,
      shippingAddress,
      shippingLocation,
      customerName,
      paymentMethod
    } = req.body;

    // 1. Validate payload c∆° b·∫£n
    if (!Array.isArray(items) || items.length === 0) {
      return res.status(400).json({ message: 'Gi·ªè h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' });
    }
    if (!phone || !shippingAddress || !shippingLocation) {
      return res.status(400).json({ message: 'Thi·∫øu s·ªë ƒëi·ªán tho·∫°i, ƒë·ªãa ch·ªâ ho·∫∑c t·ªça ƒë·ªô giao h√†ng' });
    }

    // 2. Ki·ªÉm tra khung gi·ªù & gi·∫£m t·ªìn kho
    const itemProcessing = [];
    for (const item of items) {
      itemProcessing.push(processOrderItem(item));
    }
    
    await Promise.all(itemProcessing);

    // 3. T·∫°o & l∆∞u ƒë∆°n
    const order = new Order({
      items,
      total,
      phone,
      shippingAddress,
      shippingLocation,
      customerName,
      paymentMethod,
      status: 'Ch·ªù x√°c nh·∫≠n',
      user: req.user._id
    });
    
    const savedOrder = await order.save();

    // 4. G√°n shipper g·∫ßn nh·∫•t (kh√¥ng block request)
    console.log(`üü¢ B·∫Øt ƒë·∫ßu g√°n shipper cho ƒë∆°n ${savedOrder._id}`);
    assignOrderToNearestShipper(savedOrder._id)
      .catch(err => console.error('[assignOrder] error:', err));

    // 5. G·ª≠i notification cho admin
    const userName = req.user?.name;
    notifyAdmins(savedOrder, total, userName);

    return res.status(201).json({
      message: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
      order: savedOrder
    });
  } catch (err) {
    console.error('[createOrder] error:', err);
    
    // X√°c ƒë·ªãnh m√£ l·ªói ph√π h·ª£p
    const statusCode = err.message.includes('kh√¥ng t·ªìn t·∫°i') || 
                      err.message.includes('kh√¥ng ƒë·ªß h√†ng') ||
                      err.message.includes('ch·ªâ b√°n t·ª´') 
                      ? 400 : 500;

    return res.status(statusCode).json({ 
      message: err.message || 'L·ªói server khi t·∫°o ƒë∆°n h√†ng',
      error: err.message 
    });
  }
};

/**
 * L·∫•y ƒë∆°n h√†ng c·ªßa ch√≠nh user, c√≥ th·ªÉ l·ªçc theo status
 */
exports.getMyOrders = async (req, res) => {
  try {
    const { status } = req.query;
    const query = { user: req.user._id };
    if (status) query.status = status;
    const orders = await Order.find(query).sort({ createdAt: -1 });
    return res.status(200).json(orders);
  } catch (err) {
    console.error('[getMyOrders] error:', err);
    return res.status(500).json({ message: 'L·ªói server khi l·∫•y ƒë∆°n h√†ng c·ªßa b·∫°n' });
  }
};

/**
 * ƒê·∫øm s·ªë l∆∞·ª£ng ƒë∆°n theo t·ª´ng tr·∫°ng th√°i cho user
 */
exports.countOrdersByStatus = async (req, res) => {
  try {
    const all = await Order.find({ user: req.user._id });
    const counts = all.reduce((acc, o) => {
      switch (o.status) {
        case 'Ch·ªù x√°c nh·∫≠n': acc.pending++; break;
        case 'ƒêang x·ª≠ l√Ω':    acc.confirmed++; break;
        case 'ƒêang giao':     acc.shipped++; break;
        case 'ƒê√£ giao':       acc.delivered++; break;
        case 'ƒê√£ h·ªßy':        acc.canceled++; break;
      }
      return acc;
    }, { pending:0, confirmed:0, shipped:0, delivered:0, canceled:0 });
    return res.status(200).json(counts);
  } catch (err) {
    console.error('[countOrdersByStatus] error:', err);
    return res.status(500).json({ message: 'L·ªói server khi ƒë·∫øm ƒë∆°n h√†ng theo tr·∫°ng th√°i' });
  }
};

/**
 * L·∫•y chi ti·∫øt ƒë∆°n theo id (user ho·∫∑c admin)
 */
exports.getOrderById = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id)
      .populate('user', 'name phone')
      .populate('shipper', 'name phone');

    if (!order) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    // Cho ph√©p admin, kh√°ch h√†ng v√† shipper ƒë∆∞·ª£c giao xem ƒë∆°n
    const isAdmin = req.user?.isAdmin;
    const isCustomer = order.user?._id.toString() === req.user?._id?.toString();
    const isAssignedShipper = order.shipper?._id.toString() === req.user?._id?.toString();
    
    // Cho ph√©p shipper xem ƒë∆°n h√†ng ch∆∞a ƒë∆∞·ª£c nh·∫≠n
    const isShipperViewingPendingOrder = req.query.shipperView === 'true' && 
                                        order.status === 'Ch·ªù x√°c nh·∫≠n' &&
                                        req.user?.role === 'shipper';

    if (isAdmin || isCustomer || isAssignedShipper || isShipperViewingPendingOrder) {
      return res.json(order);
    }

    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem ƒë∆°n h√†ng n√†y' });
  } catch (err) {
    console.error('[getOrderById] error:', err);
    if (err.name === 'CastError') {
      return res.status(400).json({ message: 'ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá' });
    }
    return res.status(500).json({ message: 'L·ªói server khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng' });
  }
};

/**
 * Admin: L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng, c√≥ th·ªÉ l·ªçc theo status
 */
exports.getAllOrders = async (req, res) => {
  try {
    const { status } = req.query;
    const query = status ? { status } : {};
    const orders = await Order.find(query)
      .populate('user', 'name email')
      .sort({ createdAt: -1 });
    return res.json(orders);
  } catch (err) {
    console.error('[getAllOrders] error:', err);
    return res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch ƒë∆°n h√†ng', error: err.message });
  }
};

/**
 * Admin: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
 */
exports.updateOrderStatus = async (req, res) => {
  try {
    const { status } = req.body;
    if (!status) {
      return res.status(400).json({ message: 'Thi·∫øu tr∆∞·ªùng status' });
    }
    const order = await Order.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }
    order.status = status;
    const updated = await order.save();
    return res.json({ message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng', order: updated });
  } catch (err) {
    console.error('[updateOrderStatus] error:', err);
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá',
        validStatuses: ['Ch·ªù x√°c nh·∫≠n','ƒêang x·ª≠ l√Ω','ƒêang giao','ƒê√£ giao','ƒê√£ h·ªßy']
      });
    }
    if (err.name === 'CastError') {
      return res.status(400).json({ message: 'ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá' });
    }
    return res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng', error: err.message });
  }
};

/**
 * H·ªßy ƒë∆°n (user ho·∫∑c admin)
 */
exports.cancelOrder = async (req, res) => {
  try {
    const query = req.user.isAdmin
      ? { _id: req.params.id }
      : { _id: req.params.id, user: req.user._id };
    const order = await Order.findOne(query);
    if (!order) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c kh√¥ng c√≥ quy·ªÅn' });
    }
    if (order.status !== 'Ch·ªù x√°c nh·∫≠n') {
      return res.status(400).json({ message: 'Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n ·ªü tr·∫°ng th√°i "Ch·ªù x√°c nh·∫≠n"' });
    }
    order.status = 'ƒê√£ h·ªßy';
    const updated = await order.save();
    return res.json({ message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng', order: updated });
  } catch (err) {
    console.error('[cancelOrder] error:', err);
    if (err.name === 'CastError') {
      return res.status(400).json({ message: 'ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá' });
    }
    return res.status(500).json({ message: 'L·ªói server khi h·ªßy ƒë∆°n h√†ng', error: err.message });
  }
};
