// backend/controllers/productController.js

const Product = require('../models/Product');
const Category = require('../models/Category');
const User = require('../models/User');
const Notification = require('../models/Notification');
const { safeNotify } = require('../utils/notificationMiddleware'); // ƒê∆∞·ªùng d·∫´n c√≥ th·ªÉ c·∫ßn s·ª≠a l·∫°i th√†nh ../utils/
const Order = require('../models/Order');

// H√†m ƒë·ªá quy l·∫•y danh s√°ch category con
const getAllChildCategoryIds = async (parentId) => {
  const children = await Category.find({ parent: parentId }).select('_id');
  let allIds = children.map(c => c._id.toString());
  for (const c of children) {
    const sub = await getAllChildCategoryIds(c._id);
    allIds = allIds.concat(sub);
  }
  return allIds;
};

// L·∫•y danh s√°ch s·∫£n ph·∫©m
exports.getAllProducts = async (req, res) => {
  try {
    const { category, limit, sellerId } = req.query;
    
    let filter = {}; 

    if (sellerId) {
        filter = { seller: sellerId };
    } else {
        filter = { approvalStatus: 'approved' };
    }

    if (category && category !== 'T·∫•t c·∫£' && !sellerId) {
      const ids = [category, ...(await getAllChildCategoryIds(category))];
      filter.category = { $in: ids };
    }
    
    let query = Product.find(filter).populate('category').sort({ createdAt: -1 });

    if (limit) {
      query = query.limit(parseInt(limit));
    }

    let products = await query;

    if (!sellerId) {
        products = products.filter(p => p.totalStock > 0);
    }
    
    res.json(products);
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m:', err);
    res.status(500).json({ error: err.message });
  }
};

// L·∫•y chi ti·∫øt m·ªôt s·∫£n ph·∫©m
exports.getProductById = async (req, res) => {
  try {
    const product = await Product.findById(req.params.id).populate('category');
    if (!product) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });
    }
    res.json(product);
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};


exports.getBestSellers = async (req, res) => {
    try {
        const limit = parseInt(req.query.limit, 10) || 10;

        const bestSellers = await Order.aggregate([
            { $match: { status: 'ƒê√£ giao' } },
            { $unwind: '$items' },
            {
                $group: {
                    _id: '$items.productId',
                    totalQuantitySold: { $sum: '$items.quantity' }
                }
            },
            { $sort: { totalQuantitySold: -1 } },
            { $limit: limit },
            {
                $lookup: {
                    from: 'products',
                    localField: '_id',
                    foreignField: '_id',
                    as: 'productDetails'
                }
            },
            { $unwind: '$productDetails' },
            { $replaceRoot: { newRoot: '$productDetails' } }
        ]);

        res.json(bestSellers);
    } catch (err) {
        console.error('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m b√°n ch·∫°y:', err);
        res.status(500).json({ error: 'L·ªói server' });
    }
};

// T·∫°o s·∫£n ph·∫©m m·ªõi
exports.createProduct = async (req, res) => {
  try {
    const { 
        name, price, stock, category, description, images, 
        saleStartTime, saleEndTime, barcode, weight, 
        variantGroups, variantTable 
    } = req.body;
    
    console.log('üì¶ Backend nh·∫≠n ƒë∆∞·ª£c s·∫£n ph·∫©m:', req.body);

    if (!name || !category || !images?.length || !weight) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin c∆° b·∫£n: T√™n, danh m·ª•c, ·∫£nh, tr·ªçng l∆∞·ª£ng.' });
    }

    if (variantTable && variantTable.length > 0) {
        // Validation cho variant
    } else {
        if (price == null || stock == null) {
            return res.status(400).json({ message: 'S·∫£n ph·∫©m kh√¥ng c√≥ ph√¢n lo·∫°i ph·∫£i c√≥ gi√° v√† kho.' });
        }
    }
    
    const newProduct = new Product({
      name, price, stock, category, description, images,
      saleStartTime, saleEndTime, barcode, weight,
      variantGroups, variantTable,
      seller: req.user._id,
      approvalStatus: 'pending_approval'
    });
    
    const savedProduct = await newProduct.save();

    // G·ª≠i th√¥ng b√°o cho Admin
    (async () => {
        try {
            const seller = await User.findById(req.user._id).select('name');
            const admins = await User.find({ role: 'admin', fcmToken: { $exists: true, $ne: null } });
            if (admins.length > 0) {
                const title = "S·∫£n ph·∫©m m·ªõi ch·ªù duy·ªát";
                const body = `${seller.name} v·ª´a ƒëƒÉng s·∫£n ph·∫©m m·ªõi: "${savedProduct.name}".`;
                const notifications = admins.map(admin => ({
                    user: admin._id, title, message: body, type: 'product',
                    data: { productId: savedProduct._id.toString(), screen: 'ProductApproval' }
                }));
                await Notification.insertMany(notifications);
                for (const admin of admins) {
                    await safeNotify(admin.fcmToken, {
                        title, body,
                        data: { productId: savedProduct._id.toString(), screen: 'ProductApproval' }
                    });
                }
                console.log(`[Product] ƒê√£ g·ª≠i th√¥ng b√°o duy·ªát s·∫£n ph·∫©m ƒë·∫øn ${admins.length} admin.`);
            }
        } catch (notificationError) {
            console.error("[Product] L·ªói khi g·ª≠i th√¥ng b√°o cho admin:", notificationError);
        }
    })();

    res.status(201).json(savedProduct);

  } catch (err) {
    console.error('‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:', err);
    if (err.name === 'ValidationError') {
        return res.status(400).json({ message: err.message });
    }
    res.status(500).json({ message: 'L·ªói server khi th√™m s·∫£n ph·∫©m' });
  }
};

// C·∫≠p nh·∫≠t s·∫£n ph·∫©m
exports.updateProduct = async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);
    if (!product) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });
    }

    if (req.user.role !== 'admin' && product.seller.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a s·∫£n ph·∫©m n√†y.' });
    }

    const oldValues = {
      name: product.name,
      description: product.description,
      category: product.category,
      images: JSON.stringify(product.images.sort()),
    };

    const { 
        name, price, stock, category, description, images, 
        saleStartTime, saleEndTime, barcode, weight, 
        variantGroups, variantTable 
    } = req.body;

    product.name = name;
    product.description = description;
    product.images = images;
    product.saleStartTime = saleStartTime;
    product.saleEndTime = saleEndTime;
    product.barcode = barcode;
    product.weight = weight;
    product.category = category;
    product.variantGroups = variantGroups;
    product.variantTable = variantTable;
    
    if (variantTable && variantTable.length > 0) {
      product.price = undefined;
      product.stock = undefined;
    } else {
      product.price = price;
      product.stock = stock;
    }

    if (req.user.role === 'seller') {
      const hasSignificantChange = 
        product.name !== oldValues.name ||
        product.description !== oldValues.description ||
        product.category !== oldValues.category ||
        JSON.stringify(product.images.sort()) !== oldValues.images;

      if (hasSignificantChange) {
        product.approvalStatus = 'pending_approval';
        product.rejectionReason = '';
        console.log(`[Product Update] Seller ${req.user._id} ƒë√£ thay ƒë·ªïi th√¥ng tin quan tr·ªçng c·ªßa s·∫£n ph·∫©m ${product._id}. Chuy·ªÉn v·ªÅ ch·ªù duy·ªát.`);
      } else {
        console.log(`[Product Update] Seller ${req.user._id} ch·ªâ thay ƒë·ªïi gi√°/kho c·ªßa s·∫£n ph·∫©m ${product._id}. Kh√¥ng c·∫ßn duy·ªát l·∫°i.`);
      }
    }

    const updatedProduct = await product.save();
    res.json(updatedProduct);

  } catch (err) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', err);
    if (err.name === 'ValidationError') {
      return res.status(400).json({ message: err.message });
    }
    res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m' });
  }
};

// X√≥a s·∫£n ph·∫©m
exports.deleteProduct = async (req, res) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });

        if (req.user.role !== 'admin' && product.seller.toString() !== req.user._id.toString()) {
            return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a s·∫£n ph·∫©m n√†y.' });
        }

        await Product.findByIdAndDelete(req.params.id);
        res.json({ message: 'ƒê√£ xo√° s·∫£n ph·∫©m th√†nh c√¥ng' });
    } catch (err) {
    console.error('‚ùå L·ªói khi xo√° s·∫£n ph·∫©m:', err);
    res.status(500).json({ message: 'L·ªói server khi xo√° s·∫£n ph·∫©m' });
  }
};

exports.getProductRecommendations = async (req, res) => {
    try {
        const { id: productId } = req.params;
        const limit = parseInt(req.query.limit, 10) || 8; // L·∫•y 8 s·∫£n ph·∫©m ƒë·ªÉ c√≥ d∆∞ l·ª±a ch·ªçn

        const currentProduct = await Product.findById(productId).lean();
        if (!currentProduct) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i." });
        }

        // --- Thu·∫≠t to√°n 1: "Ng∆∞·ªùi kh√°c c≈©ng mua" (Frequently Bought Together) ---
        
        // T√¨m c√°c ƒë∆°n h√†ng ch·ª©a s·∫£n ph·∫©m hi·ªán t·∫°i
        const ordersWithProduct = await Order.find(
            { 'items.productId': productId, status: 'ƒê√£ giao' },
            'items.productId' // Ch·ªâ l·∫•y field productId
        ).limit(200).lean(); // Gi·ªõi h·∫°n 200 ƒë∆°n g·∫ßn nh·∫•t ƒë·ªÉ tƒÉng t·ªëc

        let companionProductIds = {};
        if (ordersWithProduct.length > 0) {
            ordersWithProduct.forEach(order => {
                const productIdsInOrder = order.items.map(item => item.productId.toString());
                // N·∫øu ƒë∆°n h√†ng c√≥ nhi·ªÅu h∆°n 1 s·∫£n ph·∫©m
                if (productIdsInOrder.length > 1) {
                    productIdsInOrder.forEach(id => {
                        // B·ªè qua ch√≠nh s·∫£n ph·∫©m ƒëang xem
                        if (id !== productId) {
                            companionProductIds[id] = (companionProductIds[id] || 0) + 1;
                        }
                    });
                }
            });
        }
        
        // S·∫Øp x·∫øp c√°c s·∫£n ph·∫©m mua c√πng theo t·∫ßn su·∫•t v√† l·∫•y ID
        let recommendedIds = Object.entries(companionProductIds)
            .sort(([, a], [, b]) => b - a)
            .map(([id]) => new mongoose.Types.ObjectId(id));
            
        console.log(`[Recommend] T√¨m th·∫•y ${recommendedIds.length} s·∫£n ph·∫©m th∆∞·ªùng ƒë∆∞·ª£c mua c√πng.`);
        
        // --- Thu·∫≠t to√°n 2: "S·∫£n ph·∫©m c√πng danh m·ª•c" (Fallback) ---
        
        // N·∫øu kh√¥ng c√≥ ƒë·ªß s·∫£n ph·∫©m t·ª´ thu·∫≠t to√°n 1, b·ªï sung b·∫±ng s·∫£n ph·∫©m c√πng danh m·ª•c
        let recommendations = [];
        if (recommendedIds.length > 0) {
            recommendations = await Product.find({
                _id: { $in: recommendedIds },
                approvalStatus: 'approved'
            }).lean();
        }

        if (recommendations.length < limit && currentProduct.category) {
            console.log("[Recommend] Kh√¥ng ƒë·ªß g·ª£i √Ω, t√¨m th√™m s·∫£n ph·∫©m c√πng danh m·ª•c...");
            const additionalProducts = await Product.find({
                category: currentProduct.category,
                _id: { $nin: [productId, ...recommendedIds] }, // Lo·∫°i tr·ª´ s·∫£n ph·∫©m ƒë√£ c√≥
                approvalStatus: 'approved'
            }).limit(limit - recommendations.length).lean();
            
            recommendations = [...recommendations, ...additionalProducts];
        }

        // ƒê·∫£m b·∫£o kh√¥ng c√≥ s·∫£n ph·∫©m tr√πng l·∫∑p v√† l·ªçc c√°c s·∫£n ph·∫©m c√≥ t·ªìn kho > 0
        const finalRecommendations = recommendations
            .filter((p, index, self) => index === self.findIndex((t) => t._id.toString() === p._id.toString()))
            .filter(p => p.totalStock > 0);

        res.json(finalRecommendations);

    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m g·ª£i √Ω:', error);
        res.status(500).json({ error: 'L·ªói server' });
    }
};
