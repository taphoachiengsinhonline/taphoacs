// utils/assignOrderToNearestShipper.js
const Order = require('../models/Order');
const User = require('../models/User');
const sendPushNotification = require('./sendPushNotification');
const PendingDelivery = require('../models/PendingDelivery');

module.exports = async function assignOrderToNearestShipper(orderId) {
  console.log(`[Assign] B·∫Øt ƒë·∫ßu g√°n shipper cho order ${orderId}`);
  const order = await Order.findById(orderId);
  if (!order) {
    console.warn('[Assign] Order kh√¥ng t·ªìn t·∫°i');
    return;
  }
  if (order.shipper) {
    console.log('[Assign] Order ƒë√£ c√≥ shipper r·ªìi:', order.shipper);
    return;
  }

  // Xem nh·ªØng shipper ƒë√£ th·ª≠
  const pending = await PendingDelivery.findOne({ orderId });
  const excluded = pending?.triedShippers || [];

  // T√¨m shipper g·∫ßn nh·∫•t
  const nearby = await User.aggregate([
    {
      $geoNear: {
        near: {
          type: 'Point',
          coordinates: order.shippingLocation.coordinates
        },
        distanceField: 'distance',
        spherical: true,
        query: {
          role: 'shipper',
          isAvailable: true,
          fcmToken: { $exists: true, $ne: null },
          _id: { $nin: excluded }
        }
      }
    },
    { $limit: 1 }
  ]);

  if (nearby.length === 0) {
    console.warn('[Assign] Kh√¥ng t√¨m th·∫•y shipper ph√π h·ª£p');
    return;
  }

  const shipper = nearby[0];
  console.log(`[Assign] G√°n shipper ${shipper._id}, token=${shipper.fcmToken}`);

  // C·∫≠p nh·∫≠t pending
  if (!pending) {
    await PendingDelivery.create({ orderId, triedShippers: [shipper._id] });
  } else {
    pending.triedShippers.push(shipper._id);
    await pending.save();
  }

  // G√°n v√†o order
  order.shipper = shipper._id;
  await order.save();

  // Th·ª±c s·ª± g·ª≠i push
  try {
    await sendPushNotification(shipper.fcmToken, {
      title: 'üì¶ ƒê∆°n h√†ng m·ªõi',
      body: `B·∫°n c√≥ ƒë∆°n h√†ng #${order._id.slice(-6)} c·∫ßn giao`,
      data: { orderId }
    });
    console.log('[Assign] G·ª≠i push t·ªõi shipper th√†nh c√¥ng');
  } catch (e) {
    console.error('[Assign] L·ªói g·ª≠i push cho shipper:', e);
  }
};
