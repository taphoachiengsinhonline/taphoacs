const Order = require('../models/Order');
const User = require('../models/User');
const PendingDelivery = require('../models/PendingDelivery');
const sendPushNotification = require('./sendPushNotification');
const mongoose = require('mongoose');

const MAX_RETRY = 5; // T·ªëi ƒëa 5 l·∫ßn chuy·ªÉn ƒë∆°n

async function assignOrderToNearestShipper(orderId, retryCount = 0) {
  console.log(`[Assign] B·∫Øt ƒë·∫ßu g√°n shipper cho order ${orderId} (l·∫ßn ${retryCount + 1})`);
  
  try {
    const order = await Order.findById(orderId);
    if (!order || order.status !== 'Ch·ªù x√°c nh·∫≠n') return;

    // Ki·ªÉm tra s·ªë l·∫ßn th·ª≠
    if (retryCount >= MAX_RETRY) {
      console.log(`[Assign] ƒê√£ th·ª≠ ${MAX_RETRY} l·∫ßn kh√¥ng th√†nh c√¥ng. H·ªßy ƒë∆°n ${orderId}`);
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i h·ªßy
      await Order.findByIdAndUpdate(orderId, {
        status: 'ƒê√£ h·ªßy',
        cancelReason: 'Kh√¥ng t√¨m th·∫•y shipper ph√π h·ª£p'
      });
      
      // G·ª≠i th√¥ng b√°o cho kh√°ch h√†ng
      const customer = await User.findById(order.user);
      if (customer?.fcmToken) {
        await sendPushNotification(customer.fcmToken, {
          title: 'ƒê∆°n h√†ng ƒë√£ h·ªßy',
          body: `ƒê∆°n h√†ng #${order._id.toString().slice(-6)} ƒë√£ h·ªßy do kh√¥ng t√¨m ƒë∆∞·ª£c shipper`
        });
      }
      
      return;
    }

    // Load danh s√°ch ƒë√£ t·ª´ng th·ª≠
    let pending = await PendingDelivery.findOne({ orderId });
    const tried = pending?.triedShippers || [];

    // S·ª≠a t·∫°i ƒë√¢y: T·∫°o ObjectId ƒë√∫ng c√°ch
    const triedObjectIds = tried.map(id => new mongoose.Types.ObjectId(id));

    // T√¨m shipper g·∫ßn nh·∫•t ch∆∞a th·ª≠
    const candidates = await User.aggregate([
      {
        $geoNear: {
          near: {
            type: 'Point',
            coordinates: order.shippingLocation.coordinates
          },
          distanceField: 'distance',
          maxDistance: 10000, // 10km
          query: {
            role: 'shipper',
            isAvailable: true,
            _id: { $nin: triedObjectIds } // S·ª≠a t·∫°i ƒë√¢y
          },
          spherical: true
        }
      },
      { $limit: 3 }
    ]);

    if (!candidates || candidates.length === 0) {
      console.log(`[Assign] Kh√¥ng t√¨m th·∫•y shipper ph√π h·ª£p cho order ${orderId}`);
      
      // Chuy·ªÉn sang l·∫ßn th·ª≠ ti·∫øp theo
      setTimeout(async () => {
        const freshOrder = await Order.findById(orderId);
        if (freshOrder && freshOrder.status === 'Ch·ªù x√°c nh·∫≠n') {
          console.log(`[Assign] Kh√¥ng t√¨m th·∫•y shipper, chuy·ªÉn sang l·∫ßn th·ª≠ ${retryCount + 1}`);
          await assignOrderToNearestShipper(orderId, retryCount + 1);
        }
      }, 30000);
      
      return;
    }

    const next = candidates[0];
    console.log(`[Assign] Th·ª≠ g√°n shipper ${next._id} (c√°ch ${(next.distance/1000).toFixed(2)}km)`);

    // C·∫≠p nh·∫≠t PendingDelivery
    if (!pending) {
      pending = new PendingDelivery({
        orderId,
        triedShippers: [next._id],
        status: 'pending'
      });
    } else {
      // S·ª≠a t·∫°i ƒë√¢y: Chuy·ªÉn ƒë·ªïi th√†nh ObjectId
      pending.triedShippers.push(new mongoose.Types.ObjectId(next._id));
    }
    await pending.save();

    // G·ª≠i push ƒë·∫øn shipper
    if (next.fcmToken) {
      await sendPushNotification(next.fcmToken, {
        title: 'üõí ƒê∆°n h√†ng m·ªõi',
        body: `B·∫°n c√≥ ƒë∆°n h√†ng #${order._id.toString().slice(-6)} c√°ch ${(next.distance/1000).toFixed(2)}km`,
        data: { orderId: order._id.toString() },
        shipperView: "true" // Th√™m tham s·ªë n√†y
      });
    }

    // G·ª≠i admin (n·∫øu c·∫•u h√¨nh)
    if (process.env.ADMIN_FCM_TOKEN) {
      await sendPushNotification(process.env.ADMIN_FCM_TOKEN, {
        title: 'ƒê∆°n h√†ng m·ªõi',
        body: `ƒê∆°n ${orderId} c·∫ßn g√°n shipper`,
        data: { orderId }
      });
    }

    // H·∫πn gi·ªù chuy·ªÉn ƒë∆°n n·∫øu kh√¥ng nh·∫≠n
    setTimeout(async () => {
      const freshOrder = await Order.findById(orderId);
      if (freshOrder && freshOrder.status === 'Ch·ªù x√°c nh·∫≠n') {
        console.log(`[Assign] 30s ƒë√£ h·∫øt, chuy·ªÉn sang shipper ti·∫øp theo (l·∫ßn ${retryCount + 1})`);
        await assignOrderToNearestShipper(orderId, retryCount + 1);
      }
    }, 30000); // 30 gi√¢y

  } catch (err) {
    console.error('[assignOrder] error:', err);
    
    // Th·ª≠ l·∫°i sau 5s n·∫øu c√≥ l·ªói
    setTimeout(async () => {
      const freshOrder = await Order.findById(orderId);
      if (freshOrder && freshOrder.status === 'Ch·ªù x√°c nh·∫≠n') {
        console.log(`[Assign] Th·ª≠ l·∫°i sau l·ªói (l·∫ßn ${retryCount + 1})`);
        await assignOrderToNearestShipper(orderId, retryCount + 1);
      }
    }, 5000);
  }
}

module.exports = assignOrderToNearestShipper;
