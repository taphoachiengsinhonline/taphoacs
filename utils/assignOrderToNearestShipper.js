// File: backend/utils/assignOrderToNearestShipper.js
// PHI√äN B·∫¢N HO√ÄN CH·ªàNH - ƒê·∫ßy ƒë·ªß log debug

const Order = require('../models/Order');
const User = require('../models/User');
const PendingDelivery = require('../models/PendingDelivery');
const mongoose = require('mongoose');
const { safeNotify } = require('./notificationMiddleware');

const MAX_RETRY = 5;
const RETRY_DELAY = 35000; // Th·ªùi gian ch·ªù gi·ªØa c√°c chu k·ª≥ t√¨m shipper (35s)
const MODAL_TIMEOUT = 30000; // Th·ªùi gian shipper c√≥ ƒë·ªÉ ch·∫•p nh·∫≠n ƒë∆°n (30s)

async function assignOrderToNearestShipper(orderId, retryCount = 0) {
    console.log(`[assignShipper][${orderId}] --- B·∫ÆT ƒê·∫¶U CHU K·ª≤ ${retryCount} ---`);
  
    try {
        console.log(`[assignShipper][${orderId}] B∆∞·ªõc 1: T√¨m ki·∫øm ƒë∆°n h√†ng trong DB...`);
        const order = await Order.findById(orderId);
        
        if (!order) {
            console.error(`[assignShipper][${orderId}] D·ª™NG: Order.findById kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.`);
            return;
        }
        console.log(`[assignShipper][${orderId}] B∆∞·ªõc 1 TH√ÄNH C√îNG. T√¨nh tr·∫°ng ƒë∆°n h√†ng: ${order.status}`);

        const validStatuses = ['Ch·ªù x√°c nh·∫≠n', 'Ch·ªù t∆∞ v·∫•n'];
        if (!validStatuses.includes(order.status)) {
            console.log(`[assignShipper][${orderId}] D·ª™NG: Tr·∫°ng th√°i "${order.status}" kh√¥ng h·ª£p l·ªá ƒë·ªÉ t√¨m shipper.`);
            return;
        }

        if (retryCount >= MAX_RETRY) {
        console.log(`[Assign] ƒê√£ ƒë·∫°t gi·ªõi h·∫°n ${MAX_RETRY} l·∫ßn th·ª≠ cho ƒë∆°n h√†ng ${orderId}. S·∫Ω ch·ªù cron job x·ª≠ l√Ω.`);
        // <<< X√ìA HO√ÄN TO√ÄN KH·ªêI LOGIC H·ª¶Y ƒê∆†N ·ªû ƒê√ÇY >>>
        return; // D·ª´ng v√≤ng l·∫∑p
    }

        console.log(`[assignShipper][${orderId}] B∆∞·ªõc 2: T√¨m ho·∫∑c t·∫°o PendingDelivery...`);
        let pending = await PendingDelivery.findOne({ orderId });
        if (!pending) {
            pending = new PendingDelivery({ orderId, triedShippers: [], retryCount: 0 });
        }

        if (pending.retryCount < retryCount) {
            console.log(`[assignShipper][${orderId}] Reset danh s√°ch shipper ƒë√£ th·ª≠ cho chu k·ª≥ m·ªõi.`);
            pending.triedShippers = [];
            pending.retryCount = retryCount;
        }

        const triedShippers = pending.triedShippers || [];
        console.log(`[assignShipper][${orderId}] B∆∞·ªõc 3: T√¨m shipper ·ª©ng vi√™n (lo·∫°i tr·ª´ ${triedShippers.length} shipper ƒë√£ th·ª≠)...`);

        const candidates = await User.aggregate([
            {
                $geoNear: {
                    near: { type: 'Point', coordinates: order.shippingLocation.coordinates },
                    distanceField: 'distance',
                    maxDistance: 10000, // 10km
                    query: {
                        role: 'shipper',
                        isAvailable: true,
                        fcmToken: { $exists: true, $ne: null },
                        _id: { $nin: triedShippers.map(id => new mongoose.Types.ObjectId(id)) },
                    },
                    spherical: true,
                },
            },
            {
                $lookup: {
                    from: 'orders',
                    let: { userId: '$_id' },
                    pipeline: [
                        {
                            $match: {
                                $expr: {
                                    $and: [
                                        { $eq: ['$shipper', '$$userId'] },
                                        { $in: ['$status', ['ƒêang x·ª≠ l√Ω', 'ƒêang giao']] },
                                    ],
                                },
                            },
                        },
                    ],
                    as: 'active_orders',
                },
            },
            {
                $addFields: {
                    active_order_count: { $size: '$active_orders' },
                },
            },
            {
                $match: { active_order_count: { $lt: 5 } },
            },
            { $limit: 1 },
        ]);

        if (candidates.length === 0) {
            console.warn(`[assignShipper][${orderId}] B∆∞·ªõc 3 TH·∫§T B·∫†I: Kh√¥ng t√¨m th·∫•y shipper n√†o kh·∫£ d·ª•ng. L√™n l·ªãch th·ª≠ l·∫°i sau ${RETRY_DELAY}ms.`);
            setTimeout(() => assignOrderToNearestShipper(orderId, retryCount + 1), RETRY_DELAY);
            return;
        }

        const shipper = candidates[0];
        console.log(`[assignShipper][${orderId}] B∆∞·ªõc 3 TH√ÄNH C√îNG: T√¨m th·∫•y shipper ${shipper.name} (${shipper._id})`);

        pending.triedShippers.push(shipper._id);
        await pending.save();
        console.log(`[assignShipper][${orderId}] B∆∞·ªõc 4: ƒê√£ c·∫≠p nh·∫≠t PendingDelivery.`);

        if (shipper.fcmToken) {
            console.log(`[assignShipper][${orderId}] B∆∞·ªõc 5: G·ª≠i th√¥ng b√°o ƒë·∫©y ƒë·∫øn shipper...`);
            const distance = (shipper.distance / 1000).toFixed(2);
            await safeNotify(shipper.fcmToken, {
                title: 'üõí ƒê∆†N H√ÄNG M·ªöI',
                body: `B·∫°n c√≥ ƒë∆°n h√†ng m·ªõi c√°ch kho·∫£ng ${distance}km`,
                data: {
                    orderId: order._id.toString(),
                    notificationType: 'newOrderModal',
                    distance,
                    retryCount: retryCount + 1,
                    shipperView: "true"
                },
            });
            console.log(`[assignShipper][${orderId}] B∆∞·ªõc 5 TH√ÄNH C√îNG.`);
        } else {
            console.warn(`[assignShipper][${orderId}] B·ªè qua g·ª≠i th√¥ng b√°o v√¨ shipper kh√¥ng c√≥ fcmToken. Th·ª≠ l·∫°i ngay.`);
            assignOrderToNearestShipper(orderId, retryCount); // Th·ª≠ l·∫°i ngay l·∫≠p t·ª©c v·ªõi shipper ti·∫øp theo
            return;
        }

        console.log(`[assignShipper][${orderId}] B∆∞·ªõc 6: L√™n l·ªãch timeout ${MODAL_TIMEOUT}ms ƒë·ªÉ ki·ªÉm tra...`);
        setTimeout(async () => {
            const freshOrder = await Order.findById(orderId);
            const currentStatus = freshOrder?.status;
            
            if (currentStatus === 'Ch·ªù t∆∞ v·∫•n' || currentStatus === 'Ch·ªù x√°c nh·∫≠n') {
                console.log(`[assignShipper][${orderId}] Timeout: Shipper kh√¥ng ph·∫£n h·ªìi. B·∫Øt ƒë·∫ßu t√¨m shipper ti·∫øp theo.`);
                assignOrderToNearestShipper(orderId, retryCount);
            } else {
                console.log(`[assignShipper][${orderId}] Timeout: ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω (tr·∫°ng th√°i: ${currentStatus}). D·ª´ng chu k·ª≥.`);
            }
        }, MODAL_TIMEOUT);
        
        console.log(`[assignShipper][${orderId}] --- K·∫øt th√∫c chu k·ª≥ ${retryCount} ---`);

    } catch (err) {
        console.error(`[assignShipper][${orderId}] L·ªñI NGHI√äM TR·ªåNG trong chu k·ª≥ ${retryCount}:`, err);
        // L√™n l·ªãch th·ª≠ l·∫°i n·∫øu c√≥ l·ªói kh√¥ng mong mu·ªën
        setTimeout(() => assignOrderToNearestShipper(orderId, retryCount + 1), RETRY_DELAY);
    }
}

module.exports = assignOrderToNearestShipper;
