const Order = require('../models/Order');
const User = require('../models/User');
const PendingDelivery = require('../models/PendingDelivery');
const sendPushNotification = require('./sendPushNotification');
const mongoose = require('mongoose');

const MAX_RETRY = 5; // T·ªëi ƒëa 5 chu k·ª≥
const RETRY_DELAY = 35000; // 35 gi√¢y gi·ªØa c√°c chu k·ª≥
const MODAL_TIMEOUT = 30000; // 30 gi√¢y timeout cho modal

async function assignOrderToNearestShipper(orderId, retryCount = 0) {
  console.log(`[Assign] B·∫Øt ƒë·∫ßu chu k·ª≥ ${retryCount + 1} cho order ${orderId}`);

  try {
    // T√¨m ƒë∆°n h√†ng
    const order = await Order.findById(orderId);
    if (!order || order.status !== 'Ch·ªù x√°c nh·∫≠n') {
      console.log(`[Assign] ƒê∆°n ${orderId} kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ·ªü tr·∫°ng th√°i "Ch·ªù x√°c nh·∫≠n"`);
      return;
    }

    // Ki·ªÉm tra n·∫øu ƒë√£ h·∫øt s·ªë chu k·ª≥ t·ªëi ƒëa
    if (retryCount >= MAX_RETRY) {
      console.log(`[Assign] H·∫øt ${MAX_RETRY} chu k·ª≥, h·ªßy ƒë∆°n ${orderId}`);
      order.status = 'ƒê√£ hu·ª∑';
      order.cancelReason = 'Kh√¥ng c√≥ shipper nh·∫≠n ƒë∆°n sau 5 chu k·ª≥';
      await order.save();

      const customer = await User.findById(order.user);
      if (customer?.fcmToken) {
        await sendPushNotification(customer.fcmToken, {
          title: 'Th√¥ng b√°o h·ªßy ƒë∆°n',
          body: 'ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy do kh√¥ng c√≥ shipper nh·∫≠n, vui l√≤ng ƒë·∫∑t l·∫°i sau.',
        });
      }
      return;
    }

    // L·∫•y ho·∫∑c t·∫°o d·ªØ li·ªáu pending
    let pending = await PendingDelivery.findOne({ orderId });
    if (!pending) {
      pending = new PendingDelivery({
        orderId,
        triedShippers: [],
        retryCount: 0,
      });
    }

    // Reset triedShippers n·∫øu b·∫Øt ƒë·∫ßu chu k·ª≥ m·ªõi
    if (pending.retryCount < retryCount) {
      console.log(`[Assign] Reset danh s√°ch triedShippers cho chu k·ª≥ ${retryCount + 1}`);
      pending.triedShippers = [];
      pending.retryCount = retryCount;
      await pending.save();
    }

    const triedShippers = pending.triedShippers || [];

    // T√¨m shipper kh·∫£ d·ª•ng
    const candidates = await User.aggregate([
      {
        $geoNear: {
          near: { type: 'Point', coordinates: order.shippingLocation.coordinates },
          distanceField: 'distance',
          maxDistance: 10000,
          query: {
            role: 'shipper',
            isAvailable: true,
            _id: { $nin: triedShippers.map(id => new mongoose.Types.ObjectId(id)) },
          },
          spherical: true,
        },
      },
      {
        $lookup: {
          from: 'orders',
          let: { userId: '$_id' },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ['$shipper', '$$userId'] },
                    { $in: ['$status', ['ƒêang x·ª≠ l√Ω', 'ƒêang giao']] },
                  ],
                },
              },
            },
          ],
          as: 'active_orders',
        },
      },
      {
        $match: { 'active_orders': { $size: { $lt: 5 } } },
      },
      { $limit: 1 }, // Ch·ªâ l·∫•y 1 shipper m·ªói l·∫ßn
    ]);

    console.log(`[Assign] T√¨m th·∫•y ${candidates.length} shipper kh·∫£ d·ª•ng trong chu k·ª≥ ${retryCount + 1}`);

    // N·∫øu kh√¥ng c√≥ shipper n√†o kh·∫£ d·ª•ng
    if (candidates.length === 0) {
      console.log(`[Assign] Kh√¥ng c√≤n shipper kh·∫£ d·ª•ng, chuy·ªÉn sang chu k·ª≥ ${retryCount + 2} sau ${RETRY_DELAY / 1000}s`);
      setTimeout(() => assignOrderToNearestShipper(orderId, retryCount + 1), RETRY_DELAY);
      return;
    }

    // Ch·ªçn shipper v√† g·ª≠i th√¥ng b√°o
    const shipper = candidates[0];
    pending.triedShippers.push(shipper._id);
    await pending.save();

    if (shipper.fcmToken) {
      const distance = (shipper.distance / 1000).toFixed(2);
      await sendPushNotification(shipper.fcmToken, {
        title: 'üõí ƒê∆†N H√ÄNG M·ªöI',
        body: `B·∫°n c√≥ ƒë∆°n h√†ng m·ªõi c√°ch ${distance}km`,
        data: {
          orderId: order._id.toString(),
          notificationType: 'newOrderModal',
          distance,
          retryCount: retryCount + 1,
        },
      });
      console.log(`[Assign] ƒê√£ g·ª≠i th√¥ng b√°o t·ªõi shipper ${shipper._id}`);
    }

    // ƒê·ª£i 30 gi√¢y ƒë·ªÉ ki·ªÉm tra ph·∫£n h·ªìi t·ª´ shipper
    setTimeout(async () => {
      const freshOrder = await Order.findById(orderId);
      if (freshOrder?.status === 'Ch·ªù x√°c nh·∫≠n') {
        console.log(`[Assign] Modal timeout, ƒë∆°n ${orderId} v·∫´n ch∆∞a ƒë∆∞·ª£c nh·∫≠n, th·ª≠ shipper ti·∫øp theo`);
        assignOrderToNearestShipper(orderId, retryCount);
      } else {
        console.log(`[Assign] ƒê∆°n ${orderId} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, d·ª´ng qu√° tr√¨nh`);
      }
    }, MODAL_TIMEOUT);

  } catch (err) {
    console.error(`[Assign] L·ªói trong chu k·ª≥ ${retryCount + 1}:`, err);
    setTimeout(() => assignOrderToNearestShipper(orderId, retryCount), RETRY_DELAY);
  }
}

module.exports = assignOrderToNearestShipper;
