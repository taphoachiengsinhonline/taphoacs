// utils/assignOrderToNearestShipper.js

const Order = require('../models/Order');
const User = require('../models/User');
const PendingDelivery = require('../models/PendingDelivery');
const sendPushNotification = require('./sendPushNotification');

const MAX_RETRY = 5; // T·ªëi ƒëa 5 l·∫ßn chuy·ªÉn ƒë∆°n
async function assignOrderToNearestShipper(orderId, retryCount = 0) {
  console.log(`[Assign] B·∫Øt ƒë·∫ßu g√°n shipper cho order ${orderId} (l·∫ßn ${retryCount + 1})`);
  
  try {
    const order = await Order.findById(orderId);
    if (!order || order.status !== 'Ch·ªù x√°c nh·∫≠n') return;

    // Ki·ªÉm tra s·ªë l·∫ßn th·ª≠
    if (retryCount >= MAX_RETRY) {
      console.log(`[Assign] ƒê√£ th·ª≠ ${MAX_RETRY} l·∫ßn kh√¥ng th√†nh c√¥ng. H·ªßy ƒë∆°n ${orderId}`);
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i h·ªßy
      await Order.findByIdAndUpdate(orderId, {
        status: 'ƒê√£ h·ªßy',
        cancelReason: 'Kh√¥ng t√¨m th·∫•y shipper ph√π h·ª£p'
      });
      
      // G·ª≠i th√¥ng b√°o cho kh√°ch h√†ng
      const customer = await User.findById(order.user);
      if (customer?.fcmToken) {
        await sendPushNotification(customer.fcmToken, {
          title: 'ƒê∆°n h√†ng ƒë√£ h·ªßy',
          body: `ƒê∆°n h√†ng #${order._id.toString().slice(-6)} ƒë√£ h·ªßy do kh√¥ng t√¨m ƒë∆∞·ª£c shipper`
        });
      }
      
      return;
    }

  // 2. Load danh s√°ch ƒë√£ t·ª´ng th·ª≠
  let pending = await PendingDelivery.findOne({ orderId });
  const tried = pending?.triedShippers || [];

  // 3. T√¨m shipper g·∫ßn nh·∫•t ch∆∞a th·ª≠
  const candidates = await User.aggregate([
    {
      $geoNear: {
        near: {
          type: 'Point',
          coordinates: order.shippingLocation.coordinates
        },
        distanceField: 'distance',
        maxDistance: 10000, // 10km
        query: {
          role: 'shipper',
          isAvailable: true,
          _id: { $nin: tried }
        },
        spherical: true
      }
    },
    { $limit: 3 }
  ]);

  if (!candidates || candidates.length === 0) {
    console.log(`[Assign] Kh√¥ng t√¨m th·∫•y shipper ph√π h·ª£p cho order ${orderId}`);
    if (pending) {
      pending.status = 'failed';
      await pending.save();
    }
    return;
  }

  const next = candidates[0];
  console.log(`[Assign] Th·ª≠ g√°n shipper ${next._id} (c√°ch ${ (next.distance/1000).toFixed(2) }km)`);

  // 4. C·∫≠p nh·∫≠t PendingDelivery
  if (!pending) {
    pending = new PendingDelivery({
      orderId,
      triedShippers: [next._id],
      status: 'pending'
    });
  } else {
    pending.triedShippers.push(next._id);
  }
  await pending.save();

  // 5. G·ª≠i push ƒë·∫øn shipper
  if (next.fcmToken) {
      await sendPushNotification(next.fcmToken, {
        title: 'üõí ƒê∆°n h√†ng m·ªõi',
        body: `B·∫°n c√≥ ƒë∆°n h√†ng #${order._id.toString().slice(-6)} c√°ch ${(next.distance/1000).toFixed(2)}km`,
        data: { orderId: order._id.toString() }
      });
    }

    // H·∫πn gi·ªù chuy·ªÉn ƒë∆°n n·∫øu kh√¥ng nh·∫≠n
    setTimeout(async () => {
      const freshOrder = await Order.findById(orderId);
      if (freshOrder && freshOrder.status === 'Ch·ªù x√°c nh·∫≠n') {
        console.log(`[Assign] 30s ƒë√£ h·∫øt, chuy·ªÉn sang shipper ti·∫øp theo (l·∫ßn ${retryCount + 1})`);
        await assignOrderToNearestShipper(orderId, retryCount + 1);
      }
    }, 30000); // 30 gi√¢y

  } catch (err) {
    console.error('[assignOrder] error:', err);
  }
}

  // 6. G·ª≠i admin (n·∫øu c·∫•u h√¨nh)
  if (process.env.ADMIN_FCM_TOKEN) {
    await sendPushNotification(process.env.ADMIN_FCM_TOKEN, {
      title: 'ƒê∆°n h√†ng m·ªõi',
      body: `ƒê∆°n ${orderId} c·∫ßn g√°n shipper`,
      data: { orderId }
    });
  }

  // 7. N·∫øu sau 30s v·∫´n ch∆∞a c√≥ ai nh·∫≠n (order.shipper v·∫´n null), g·ªçi l·∫°i
  setTimeout(async () => {
    const fresh = await Order.findById(orderId);
    if (fresh && !fresh.shipper) {
      console.log(`[Assign] 30s h·∫øt, retry g√°n shipper cho order ${orderId}`);
      await assignOrderToNearestShipper(orderId);
    }
  }, 30 * 1000);
}

module.exports = assignOrderToNearestShipper;
