const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Vui l√≤ng nh·∫≠p t√™n']
  },
  email: {
    type: String,
    required: [true, 'Vui l√≤ng nh·∫≠p email'],
    unique: true,
    match: [
      /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/,
      'Email kh√¥ng h·ª£p l·ªá'
    ]
  },
  phone: {
    type: String,
    required: [true, 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i'],
    match: [
      /^(0[35789]|84[35789]|01[2689])([0-9]{8})$/,
      'S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng: 03/05/07/08/09/012/016/018/019 ho·∫∑c +84'
    ]
  },
  address: {
    type: String,
    required: [true, 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ'],
    minlength: [10, 'ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±']
  },
  password: {
    type: String,
    required: [true, 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u']
  },
  isAdmin: {
    type: Boolean,
    default: false
  },
  expoPushToken: {
    type: String,
    default: null // üëà token d√πng cho th√¥ng b√°o ƒë·∫©y (Expo Push)
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// ·∫®n tr∆∞·ªùng nh·∫°y c·∫£m khi tr·∫£ v·ªÅ client
userSchema.methods.toJSON = function () {
  const user = this.toObject();
  delete user.password;
  delete user.__v;
  return user;
};

module.exports = mongoose.model('User', userSchema);
