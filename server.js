const Category = require('./models/Category');
const User = require('./models/User');
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const Product = require('./models/Product');
const app = express();
const Order = require('./models/Order'); // T·∫°o file Order.js t∆∞∆°ng t·ª± User.js
const notificationRoutes = require('./routes/NotificationRoutes');

app.use('/auth', require('./routes/authRoutes'));
app.use('/notifications', notificationRoutes);
app.use('/api/products', require('./routes/productRoutes'));
app.use(cors());
app.use(express.json()); // üëà Di chuy·ªÉn l√™n ƒë√¢y
app.use((req, res, next) => {
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  next();
});
// L·∫•y t·∫•t c·∫£ danh m·ª•c
app.get('/categories', async (req, res) => {
  try {
    const categories = await Category.find();
    console.log('>> Tr·∫£ danh m·ª•c:', categories); // üëà Log debug ·ªü ƒë√¢y
    res.json(categories);
  } catch (err) {
    console.error('>> L·ªói l·∫•y danh m·ª•c:', err); // üëà Log l·ªói chi ti·∫øt
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh m·ª•c' });
  }
});

app.get('/orders', async (req, res) => {
  try {
    const orders = await Order.find({ user: req.query.userId })
      .populate('items.product')
      .sort({ createdAt: -1 });
    res.json(orders);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// T·∫°o m·ªõi danh m·ª•c

app.post('/categories', async (req, res) => {
  const { name, parent } = req.body;
  try {
    const existing = await Category.findOne({ name });
    if (existing) return res.status(400).json({ message: 'Danh m·ª•c ƒë√£ t·ªìn t·∫°i' });

    const newCategory = new Category({ name, parent: parent || null });
    await newCategory.save();
    res.status(201).json(newCategory);
  } catch (err) {
    console.error('>> L·ªói t·∫°o danh m·ª•c:', err);
    res.status(500).json({ message: 'L·ªói server khi t·∫°o danh m·ª•c' });
  }
});


app.get('/categories', async (req, res) => {
  try {
    const categories = await Category.find().populate('parent', 'name');
    res.json(categories);
  } catch (err) {
    console.error('L·ªói l·∫•y danh m·ª•c:', err);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh m·ª•c' });
  }
});

app.delete('/categories/:id', async (req, res) => {
  try {
    const { id } = req.params;

    // Xo√° danh m·ª•c con tr∆∞·ªõc (n·∫øu c√≥)
    await Category.deleteMany({ parent: id });

    // Xo√° ch√≠nh danh m·ª•c ƒë√≥
    await Category.findByIdAndDelete(id);
    res.json({ message: 'ƒê√£ xo√° danh m·ª•c v√† danh m·ª•c con (n·∫øu c√≥)' });
  } catch (err) {
    console.error('L·ªói xo√° danh m·ª•c:', err);
    res.status(500).json({ message: 'L·ªói server khi xo√° danh m·ª•c' });
  }
});



app.get('/products', async (req, res) => {
  const { category } = req.query;
  const filter = category ? { category } : {};
  const products = await Product.find(filter);
  res.json(products);
});
app.post('/orders', async (req, res) => {
  try {
    const { items, total, phone, shippingAddress, userId } = req.body;

    // 1. Validate input
    if (!items || !Array.isArray(items) || items.length === 0) {
      return res.status(400).json({ message: 'Danh s√°ch s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá' });
    }
    
    if (!total || total <= 0) {
      return res.status(400).json({ message: 'T·ªïng ti·ªÅn kh√¥ng h·ª£p l·ªá' });
    }

    // 2. Check product existence
    const productIds = items.map(i => i.productId);
    const products = await Product.find({ _id: { $in: productIds } });
    
    if (products.length !== items.length) {
      return res.status(400).json({ message: 'M·ªôt s·ªë s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });
    }

    // 3. Create order
    const order = new Order({
      user: userId,
      items: items.map(item => ({
        product: item.productId,
        quantity: item.quantity,
        price: item.price
      })),
      total,
      phone,
      shippingAddress,
      status: 'pending'
    });

    // 4. Save order
    const savedOrder = await order.save();
    console.log('ƒê√£ l∆∞u ƒë∆°n h√†ng:', savedOrder);

    // 5. Update stock
    const bulkOps = items.map(item => ({
      updateOne: {
        filter: { _id: item.productId },
        update: { $inc: { stock: -item.quantity } }
      }
    }));
    
    await Product.bulkWrite(bulkOps);

    res.status(201).json(savedOrder);

  } catch (err) {
    console.error('L·ªói chi ti·∫øt:', err);
    res.status(500).json({ 
      message: err.message.includes('validation') 
        ? 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' 
        : 'L·ªói server khi t·∫°o ƒë∆°n h√†ng',
      error: err.message
    });
  }
});



// ƒêƒÉng k√Ω
app.post('/register', async (req, res) => {
  const { name, email, password } = req.body;
  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω' });

    const user = new User({ name, email, password });
    await user.save();
    res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng' });
  } catch (err) {
    console.error('L·ªói register:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// ƒêƒÉng nh·∫≠p
app.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user || user.password !== password) {
      return res.status(401).json({ message: 'Sai email ho·∫∑c m·∫≠t kh·∫©u' });
    }
    res.status(200).json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng', user });
  } catch (err) {
    console.error('L·ªói login:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});
// server.js
app.put('/users/:id', async (req, res) => {
  try {
    const { name, phone, address } = req.body;
    
    // C·∫≠p nh·∫≠t v√† tr·∫£ v·ªÅ user m·ªõi
    const updatedUser = await User.findByIdAndUpdate(
      req.params.id,
      { name, phone, address },
      { new: true } // <- Quan tr·ªçng: tr·∫£ v·ªÅ document sau khi update
    ).select('-password'); // Lo·∫°i b·ªè tr∆∞·ªùng password

    if (!updatedUser) {
      return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });
    }

    res.json(updatedUser);

  } catch (err) {
    console.error('L·ªói c·∫≠p nh·∫≠t user:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

mongoose.connect('mongodb+srv://admin:Hunt3rlov3151220041512@taphoa.mx0zl2l.mongodb.net/?retryWrites=true&w=majority&appName=taphoa')
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error(err));


app.post('/products', async (req, res) => {
  const product = new Product(req.body);
  await product.save();
  res.json(product);
});

app.listen(3000, () => console.log('Server running on port 3000'));
