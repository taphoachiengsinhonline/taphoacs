// productRoutes.js
const express = require('express');
const router = express.Router();
const Product = require('../models/Product');
const Category = require('../models/Category');
const User = require('../models/User');

// Middleware ki·ªÉm tra quy·ªÅn admin
const isAdmin = async (req, res, next) => {
  try {
    const userId = req.header('x-user-id');

    if (!userId) {
      return res.status(401).json({ message: 'Kh√¥ng c√≥ user ID trong header' });
    }

    const user = await User.findById(userId);

    if (!user || !user.isAdmin) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y' });
    }

    req.user = user;
    next();
  } catch (err) {
    console.error('‚ùå L·ªói x√°c th·ª±c admin:', err);
    res.status(500).json({ message: 'L·ªói server khi ki·ªÉm tra quy·ªÅn admin' });
  }
};

// üëâ H√†m ƒë·ªá quy l·∫•y t·∫•t c·∫£ category con
const getAllChildCategoryIds = async (parentId) => {
  const children = await Category.find({ parent: parentId }).select('_id');
  let allChildIds = children.map(c => c._id.toString());

  for (const child of children) {
    const subChildren = await getAllChildCategoryIds(child._id);
    allChildIds = allChildIds.concat(subChildren);
  }

  return allChildIds;
};

// ‚úÖ GET /api/products?category=ID
router.get('/', async (req, res) => {
  try {
    const { category } = req.query;

    let filter = {};
    if (category && category !== 'T·∫•t c·∫£') {
      const categoryIds = [category, ...(await getAllChildCategoryIds(category))];
      filter.category = { $in: categoryIds };
    }

    const products = await Product.find(filter).populate('category');
    res.json(products);
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m:', err);
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ POST /api/products - Th√™m s·∫£n ph·∫©m m·ªõi (ch·ªâ admin)
router.post('/', isAdmin, async (req, res) => {
  try {
    const { name, price, category, image } = req.body;
    console.log('üì¶ Th√¥ng tin s·∫£n ph·∫©m nh·∫≠n ƒë∆∞·ª£c:', req.body);
    if (!name || !price || !category) {
      return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m' });
    }

    const newProduct = new Product({
      name,
      price,
      category,
      image,
    });

    const saved = await newProduct.save();
    res.status(201).json(saved);
  } catch (err) {
    console.error('‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:', err);
    res.status(500).json({ message: 'L·ªói server khi th√™m s·∫£n ph·∫©m' });
  }
});

// ‚úÖ DELETE /api/products/:id - Xo√° s·∫£n ph·∫©m (ch·ªâ admin)
router.delete('/:id', isAdmin, async (req, res) => {
  try {
    const product = await Product.findByIdAndDelete(req.params.id);
    if (!product) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });
    res.json({ message: 'ƒê√£ xo√° s·∫£n ph·∫©m th√†nh c√¥ng' });
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server' });
  }
});

module.exports = router;
