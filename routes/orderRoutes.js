// routes/orderRoutes.js
const express = require('express');
const router = express.Router();
const Order = require('../models/Order');
const { verifyToken, isAdminMiddleware } = require('../middlewares/authMiddleware');
const sendPushNotification = require('../utils/sendPushNotification');
const User = require('../models/User');

// T·∫°o ƒë∆°n h√†ng m·ªõi (ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p)
router.post('/', verifyToken, async (req, res) => {
  try {
    const { 
      items, 
      total, 
      phone, 
      shippingAddress, 
      customerName, 
      paymentMethod 
    } = req.body;

    const newOrder = new Order({
      items,
      total,
      phone,
      shippingAddress,
      customerName,
      user: req.user._id,
      status: 'Ch·ªù x√°c nh·∫≠n',
      paymentMethod
    });

    const savedOrder = await newOrder.save();

    // G·ª≠i th√¥ng b√°o cho admin
    const admins = await User.find({
      isAdmin: true,
      expoPushToken: { $exists: true, $ne: null },
    });

    for (const admin of admins) {
      await sendPushNotification(
        admin.expoPushToken,
        'üõí C√≥ ƒë∆°n h√†ng m·ªõi!',
        `Ng∆∞·ªùi d√πng ${req.user.name || 'kh√°ch'} v·ª´a ƒë·∫∑t h√†ng. T·ªïng: ${total.toLocaleString()}ƒë`
      );
    }

    res.status(201).json(savedOrder);
  } catch (err) {
    console.error('L·ªói t·∫°o ƒë∆°n h√†ng:', err);
    res.status(500).json({ message: 'L·ªói t·∫°o ƒë∆°n h√†ng', error: err.message });
  }
});

// L·∫•y ƒë∆°n h√†ng c√° nh√¢n
router.get('/my-orders', verifyToken, async (req, res) => {
  try {
    const { status } = req.query;
    const query = { user: req.user._id };
    if (status) query.status = status;

    const orders = await Order.find(query).sort({ createdAt: -1 });
    res.json(orders);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói l·∫•y ƒë∆°n h√†ng c·ªßa b·∫°n', error: err.message });
  }
});

// L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (admin)
router.get('/', verifyToken, isAdminMiddleware, async (req, res) => {
  try {
    const { status } = req.query;
    const query = {};
    if (status) query.status = status;

    const orders = await Order.find(query)
      .populate('user', 'name email')
      .sort({ createdAt: -1 });

    res.json(orders);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng', error: err.message });
  }
});

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (admin)
router.put('/:id', verifyToken, isAdminMiddleware, async (req, res) => {
  try {
    const { status } = req.body;
    
    const updatedOrder = await Order.findByIdAndUpdate(
      req.params.id,
      { status },
      { 
        new: true,
        runValidators: true,
        context: 'query',
        omitUndefined: true
      }
    );

    if (!updatedOrder) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    res.json({ 
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng', 
      order: updatedOrder 
    });
  } catch (err) {
    console.error('L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng:', err);
    
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá',
        validStatuses: [
          'Ch·ªù x√°c nh·∫≠n',
          'ƒêang x·ª≠ l√Ω',
          'ƒêang giao',
          'ƒê√£ giao',
          'ƒê√£ h·ªßy'
        ]
      });
    }

    res.status(500).json({ 
      message: 'L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng', 
      error: process.env.NODE_ENV === 'development' ? err.message : null
    });
  }
});

// Hu·ª∑ ƒë∆°n h√†ng (ng∆∞·ªùi d√πng)
router.put('/:id/cancel', verifyToken, async (req, res) => {
  try {
    const order = await Order.findById(req.params.id)
      .populate('user', 'name email');

    // Validate tr·∫°ng th√°i
    if (order.status !== 'Ch·ªù x√°c nh·∫≠n') {
      return res.status(400).json({
        success: false,
        message: 'Ch·ªâ c√≥ th·ªÉ hu·ª∑ ƒë∆°n ·ªü tr·∫°ng th√°i Ch·ªù x√°c nh·∫≠n'
      });
    }

    // Validate quy·ªÅn truy c·∫≠p
    if (order.user._id.toString() !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y'
      });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin hu·ª∑
    const updates = {
      status: 'ƒê√£ h·ªßy',
      cancelReason: req.body.cancelReason,
      cancelledAt: Date.now()
    };

    const updatedOrder = await Order.findByIdAndUpdate(
      req.params.id,
      { $set: updates },
      { new: true }
    );

    // G·ª≠i th√¥ng b√°o cho admin
    const admins = await User.find({
      isAdmin: true,
      expoPushToken: { $exists: true, $ne: null },
    });

    for (const admin of admins) {
      await sendPushNotification(
        admin.expoPushToken,
        '‚ùå ƒê∆°n h√†ng b·ªã hu·ª∑',
        `ƒê∆°n h√†ng ${order._id} ƒë√£ b·ªã hu·ª∑ b·ªüi kh√°ch h√†ng`
      );
    }

    res.json({
      success: true,
      order: updatedOrder
    });

  } catch (error) {
    console.error('L·ªói hu·ª∑ ƒë∆°n h√†ng:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

module.exports = router;
