// routes/orderRoutes.js
const express = require('express');
const router = express.Router();
const Order = require('../models/Order');
const { verifyToken, isAdminMiddleware } = require('../middlewares/authMiddleware');
const sendPushNotification = require('../utils/sendPushNotification');
const User = require('../models/User');

// T·∫°o ƒë∆°n h√†ng m·ªõi (ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p)
router.post('/', verifyToken, async (req, res) => {
  try {
    // ƒê·ªçc c√°c tr∆∞·ªùng tr·ª±c ti·∫øp t·ª´ body
    const { 
      items, 
      total, 
      phone, 
      shippingAddress, 
      customerName, 
      paymentMethod 
    } = req.body;

    const newOrder = new Order({
      items,
      total,
      phone,          // L·∫•y tr·ª±c ti·∫øp
      shippingAddress,// L·∫•y tr·ª±c ti·∫øp
      customerName,   // L·∫•y tr·ª±c ti·∫øp
      user: req.user._id,
      status: 'Ch·ªù x√°c nh·∫≠n',
      paymentMethod
    });

    const savedOrder = await newOrder.save();

    const admins = await User.find({
      isAdmin: true,
      expoPushToken: { $exists: true, $ne: null },
    });

    for (const admin of admins) {
      await sendPushNotification(
        admin.expoPushToken,
        'üõí C√≥ ƒë∆°n h√†ng m·ªõi!',
        `Ng∆∞·ªùi d√πng ${req.user.name || 'kh√°ch'} v·ª´a ƒë·∫∑t h√†ng. T·ªïng: ${total.toLocaleString()}ƒë`
      );
    }

    res.status(201).json(savedOrder);
  } catch (err) {
    console.error('L·ªói t·∫°o ƒë∆°n h√†ng:', err);
    res.status(500).json({ message: 'L·ªói t·∫°o ƒë∆°n h√†ng', error: err.message });
  }
});

// L·∫•y ƒë∆°n h√†ng c√° nh√¢n, c√≥ th·ªÉ l·ªçc theo status
router.get('/my-orders', verifyToken, async (req, res) => {
  try {
    const orders = await Order.find({ user: req.user._id })
      .populate({
        path: 'user',
        select: '_id name',
        options: { lean: true } // Th√™m lean ƒë·ªÉ tr·∫£ v·ªÅ plain object
      })
      .lean(); // Th√™m lean() ·ªü ƒë√¢y

    res.json(orders);
  } catch (err) {
    console.error('Error fetching orders:', err);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y ƒë∆°n h√†ng' });
  }
});

// Th√™m verifyToken v√†o route GET /:id
router.get('/:id', verifyToken, async (req, res) => {
  try {
    const order = await Order.findById(req.params.id)
      .populate({
        path: 'user',
        select: '_id name',
        options: { lean: true }
      })
      .lean();

    if (!order) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p user null
    order.user = order.user || { _id: null, name: 'Kh√°ch h√†ng' };
    
    res.json(order);
  } catch (err) {
    console.error('Error fetching order:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});


// L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (ch·ªâ admin), c√≥ th·ªÉ l·ªçc theo status
router.get('/', verifyToken, isAdminMiddleware, async (req, res) => {
  try {
    const { status } = req.query;
    const query = {};
    if (status) query.status = status;

    const orders = await Order.find(query)
      .populate('user', 'name email')
      .sort({ createdAt: -1 });

    res.json(orders);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng', error: err.message });
  }
});

// Admin c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
router.put('/:id', verifyToken, isAdminMiddleware, async (req, res) => {
  try {
    const { status } = req.body;
    
    // Ch·ªâ c·∫≠p nh·∫≠t tr∆∞·ªùng status v√† t·∫Øt validate
    const updatedOrder = await Order.findByIdAndUpdate(
      req.params.id,
      { status },
      { 
        new: true,
        runValidators: true, // ‚úÖ Validate ri√™ng tr∆∞·ªùng status
        context: 'query',   // ‚ö†Ô∏è B·∫Øt bu·ªôc ƒë·ªÉ validate enum
        omitUndefined: true // B·ªè qua c√°c tr∆∞·ªùng undefined
      }
    );

    if (!updatedOrder) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    res.json({ 
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng', 
      order: updatedOrder 
    });
  } catch (err) {
    console.error('L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng:', err);
    
    // X·ª≠ l√Ω l·ªói enum
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá',
        validStatuses: [
          'Ch·ªù x√°c nh·∫≠n',
          'ƒêang x·ª≠ l√Ω',
          'ƒêang giao',
          'ƒê√£ giao',
          'ƒê√£ h·ªßy'
        ]
      });
    }

    res.status(500).json({ 
      message: 'L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng', 
      error: process.env.NODE_ENV === 'development' ? err.message : null
    });
  }
});
// Th√™m endpoint hu·ª∑ ƒë∆°n h√†ng
// Th√™m route hu·ª∑ ƒë∆°n h√†ng
router.put('/:id/cancel', verifyToken, async (req, res) => {
  try {
    const orderId = req.params.id;
    console.log(`[CANCEL] Attempting to cancel order ${orderId}`);
    
    const order = await Order.findById(orderId);
    
    if (!order) {
      console.log(`[CANCEL] Order ${orderId} not found`);
      return res.status(404).json({ 
        status: 'error',
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' 
      });
    }

    // Ki·ªÉm tra quy·ªÅn
    if (order.user.toString() !== req.user._id.toString()) {
      console.log(`[CANCEL] User ${req.user._id} unauthorized to cancel order ${orderId}`);
      return res.status(403).json({ 
        status: 'error',
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn hu·ª∑ ƒë∆°n n√†y' 
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i
    if (order.status !== 'Ch·ªù x√°c nh·∫≠n') {
      console.log(`[CANCEL] Invalid status ${order.status} for order ${orderId}`);
      return res.status(400).json({ 
        status: 'error',
        message: 'Ch·ªâ c√≥ th·ªÉ hu·ª∑ ƒë∆°n ·ªü tr·∫°ng th√°i "Ch·ªù x√°c nh·∫≠n"' 
      });
    }

    // C·∫≠p nh·∫≠t
    order.status = 'ƒê√£ h·ªßy';
    order.cancelReason = req.body.cancelReason;
    order.updatedAt = Date.now();
    
    await order.save();
    
    console.log(`[CANCEL] Order ${orderId} cancelled successfully`);
    res.json({ 
      status: 'success',
      data: order
    });

  } catch (err) {
    console.error(`[CANCEL ERROR] ${err.message}`, err.stack);
    res.status(500).json({ 
      status: 'error',
      message: 'L·ªói server khi hu·ª∑ ƒë∆°n' 
    });
  }
});

module.exports = router;
